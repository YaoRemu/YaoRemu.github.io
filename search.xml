<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[媒体对象（评论模块）]]></title>
    <url>%2F2019%2F04%2F29%2F%E5%AA%92%E4%BD%93%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[默认样式这是一个抽象的样式，用以后就不同类型的组件，这些组件具有文本内容，在左边或者在右边有对其的一些图片，像一些评论、或者模仿推特来做的一些消息等 1234567891011121314151617181920212223body{ margin:10px 0;} 欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客 可以看到左边有一张 64*64的图片，右边有一个标题是关于他的描述，下面是一个具体的内容描述 由于 Bootstrap版本问题，图片的位置可能不会改变，可以试用下面两个类： 老版本使用：pull-left 新版本使用：media-right 如果多复制几次，可以出现以下效果，模仿一些类似于 推特评论或者博客等等： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647 欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客 对象的继承关系有的时候需求并不是所有的都在一排，可能当前第二个评论的内容它属于第一个内容，它有一个继承关系，有一个属于关系，它就不应该在它的同行，它应该向后退格 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950 欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客 图片置右将 图片代码的div 移动到 内容div 的下面，然后修改 media-left 为 media-right 即可 1234567891011121314151617 欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客 图片垂直方向的位置为实现第三个功能，首先添加一下文字区域的内容； 可以看到，现在图片是居于内容的左上角的，有的时候我们需要让图片居中显示，也有的时候需要图片居底显示 在包含图片的 a标签 中添加 media-middle（居中） 或者 meida-bottom（置底） 即可 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849 欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客 欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客欢迎来到Yaoremu的博客 本人测试 media-left、 media-middle 等 均无法剩下，可能是因为 Bootstrap版本问题… 使用列表方式创建由于现在的所有内容都是经过 div 进行展示的，意味着要不停的去创建 div，不太合理 Bootstrap 给我们提供了列表方式去实现该内容,除了最外层的 div 换成了 列表 的方式，其他方面没有变化 12345678910111213141516 欢迎来到YaoRemu的博客 欢迎来到YaoRemu的博客欢迎来到YaoRemu的博客欢迎来到YaoRemu的博客欢迎来到YaoRemu的博客欢迎来到YaoRemu的博客 欢迎来到YaoRemu的博客欢迎来到YaoRemu的博客欢迎来到YaoRemu的博客欢迎来到YaoRemu的博客欢迎来到YaoRemu的博客 欢迎来到YaoRemu的博客欢迎来到YaoRemu的博客欢迎来到YaoRemu的博客欢迎来到YaoRemu的博客欢迎来到YaoRemu的博客 欢迎来到YaoRemu的博客欢迎来到YaoRemu的博客欢迎来到YaoRemu的博客欢迎来到YaoRemu的博客欢迎来到YaoRemu的博客 可以看到，这比我们使用 多个 div 来创建要好很多，这就是媒体对象的列表]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[导航条]]></title>
    <url>%2F2019%2F04%2F29%2F%E5%AF%BC%E8%88%AA%E6%9D%A1%2F</url>
    <content type="text"><![CDATA[简介 基本的导航 表单 按钮 文本 非导航的链接 组件排列 固定在顶端或者底部 反色的导航条 路径导航 基本的导航1234567891011121314151617 蕾姆 Link Link Link 导航添加表单12345678910111213141516171819202122232425 蕾姆 Link Link Link 搜索 组件排列相应的控件添加 navbar-left 即可 此处需要使用 JS脚本 进行操作 1234567891011121314151617181920212223242526272829303132333435363738394041 蕾姆 Link Link Link 搜索 Link 点我 hello1 hello2 hello3 hello4 1234$("#mytab a").click(function(e){ e.preventDefault(); $(this).tab("show");}) 固定在顶端或者底部 Bootstrap导航 默认固定在顶端 在 nav标签添加 nav-fixed-bottom 类即可 12345678910111213141516171819202122232425 蕾姆 Link Link Link 搜索 反色的导航条默认是白色，我们可以把它改为黑色，修改 nav标签 中的 navbar-default类 即可 12345678910111213141516171819202122232425 蕾姆 Link Link Link 搜索 路径导航路径导航，在文档中出现较多 role属性： 增加标签的可访问性 1234567 Home Library Data]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[透视]]></title>
    <url>%2F2019%2F04%2F28%2F%E9%80%8F%E8%A7%86%2F</url>
    <content type="text"><![CDATA[三点透视 两点透视第一种 第二种 一点透视 五点透视]]></content>
      <categories>
        <category>素描</category>
      </categories>
      <tags>
        <tag>画画</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[导航]]></title>
    <url>%2F2019%2F04%2F28%2F%E5%AF%BC%E8%88%AA%2F</url>
    <content type="text"><![CDATA[导航分为几个方向： 标签页 胶囊式标签页 两端对齐标签页 禁用的链接 添加下拉菜单 基本的标签页 role 的添加会导致一些问题的避免 HTML1234567891011 home Hello World JavaScript1234$("#mytab a").click(function(e){ e.preventDefault(); $(this).tab("show");} 由于没有点击选中的效果，所以需要引入它需要使用的一个插件 胶囊式标签页胶囊我们都看过，其实就是颜色不一样 HTML1234567891011 home Hello World JavaScript1234$("#mytab a").click(function(e){ e.preventDefault(); $(this).tab("show");} 另外，如果我们希望垂直展示，我们只需要在外层 ul 添加一个垂直展示的方式 【 nav-stacked 】 即可 两端对齐标签页两端对齐的标签页只需要添加一个 class 【 nav-justified 】 即可 HTML1234567891011 home Hello World JavaScript1234$("#mytab a").click(function(e){ e.preventDefault(); $(this).tab("show");} 禁用的链接有时候需要一些 使用户无法点击的情况，只需要在不想让用户点击的 li 标签中禁止点击即可 HTML1234567891011 home Hello World JavaScript1234$("#mytab a").click(function(e){ e.preventDefault(); $(this).tab("show");} 添加下拉菜单如果 world 下有很多子分类，意味着我们需要给 world 添加一个可下拉式的菜单效果 HTML123456789101112131415161718192021 home Hello World hello1 hello2 hello3 hello4 JavaScript1234$("#mytab a").click(function(e){ e.preventDefault(); $(this).tab("show");}]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bootstrap输入框组]]></title>
    <url>%2F2019%2F04%2F28%2FBootstrap%E8%BE%93%E5%85%A5%E6%A1%86%E7%BB%84%2F</url>
    <content type="text"><![CDATA[主要内容 输入框组 导航 导航条 输入框组 基本的输入框 输入框的尺寸 多添加的多选框和单选框 多添加按钮 多添加下拉式按钮 多添加分裂式按钮下拉菜单 基本的输入框1234567891011121314151617 @ .00 $ .00 输入框的尺寸输入框的尺寸是根据屏幕的自适应来操作的，比如：响应式布局，针对于手机 、 ipad 和 显示器 时的显示是不一样的,根据不同的屏幕选择不同的内容 1234567891011121314151617 @ .00 $ .00 多添加的多选框和单选框12345678910 多添加按钮12345678910 Go！ 多添加下拉式按钮通常会在输入框前面有一个下拉菜单，因为选项特别多，所以在前面还可以添加下拉菜单的效果 1234567891011121314151617181920 Action Hello Hello Hello Hello Hello]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件和目录常用命令]]></title>
    <url>%2F2019%2F04%2F28%2F%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[目标 查看目录内容 ls 切换目录 cd 创建和删除操作 touch ： 创建文件 rm ： 删除文件和目录 mkdir ： 创建目录 拷贝和移动工具 cp mv 查看文件内容 cat more grep 其他 echo 重定向 > 和 >> 管道 | 查看目录内容终端实用技巧自动补全 在敲出 文件/目录/命令 的前几个字幕之后，按下 tab 键 如果输入没有歧义，系统会自动补全 如果还存在其他 文件/目录/命令 ，再按一下，系统会提示可能存在的命令 曾经使用过的命令 按 上/下 光标键可以在曾经使用过的命令之间来回切换 如果想要退出选择，并且不想执行当前选中的命令，可以按 ctrl + c ls命令说明 ls 是英文单词list的简写，其功能为列出目录的内容，是用户最常用的命令之一，类似于 DOS 下的 dir命令 Linux下文件和目录的特点 Linux 文件 或者 目录 名称最长可以由 256 个字符 以 【 . 】 开头的文件为隐藏文件，需要用 -a 参数才能显示 eg ： 创建隐藏文件 eg ： 使用 -a 参数显示隐藏文件 【 . 】 代表当前目录 【 .. 】 代表上一级目录 eg ： 返回上一级目录 ls常用选项 参数 含义 -a 显示指定目录系所有子目录与文件，包含隐藏文件 -l 以列表方式显示文件的详细信息 -h 配合 -l 以人性化的方式显示文件大小 在 ubuntu 中 默认情况下，敲入 ls 终端命令之后，显示文件的方向是以水平方向 横排显示 的，同时 ubuntu 中默认情况下： 文件夹，会使用蓝色字体显示 文件，会使用白色字体显示 -l 选项 我们可以看到，文件列表以纵向方向来显示的，同时我们可以看到文件的详细信息，我们可以看到文件夹以及文件创建的 时间以及日期、磁盘空间大小 另外，前面出现了两列 python ，等在后面章节讲到用户已经群组的时候会单独的介绍 然后，在终端窗口的最前面，有一堆的字母，其中第一列字母是小写字母 d，如果是目录，会在第一列中以小写字母 d 来标识，如果不是目录，就没有小写字母 d -h 选项单独使用 ls -h 是 没有效果的。 eg： 因为 -h 需要配合 -l 一起使用。 eg： 我们可以看到，整体显示的信息与 只使用 -l 的结果是差不多的，唯一的区别是 文件和目录大小，这就是以人性化的方式来显示文件大小。 eg： 扩展命令的输入方式在 linux 中，终端命令的选项，如果我们要有多个选项，我们可以 分开来输入，也可以 合在一起 来输入。 eg： 注意： 所有的选项输入的先后顺序是没有关系的 隐藏文件 【 . 】 开头的文件表示文件是隐藏的 注意：隐藏文件和隐藏文件夹是怎么出现在 用户 的家目录中？ 因为我们在 Ubuntu 中，安装有各种各样的软件，这些隐藏文件夹和隐藏文件，就是来专门配置系统上安装的各个应用软件的，所以在我们日常使用的时候，不需要理会这些文件。 例如： 【 .vim 】 是专门用来配置终端上的配置器软件。 在日常使用中，这些隐藏文件和隐藏文件夹保持不变即可 计算机中文件大小的表达方式（科普） 单位 英文 含义 字节 B（Byte） 在计算机中作为一个数字单元，一般为8位2进制数 千 B（Kibibyte） 1KB = 1024B，千字节（1024 = 2**10） 兆 k（Mebibyte） 1MB = 1024KB，百万字节 千兆 B（Gigabyte） 1GB = 1024MB，十亿字节，千兆字符 太 B（Terabyte） 1TB = 1024GB，万亿字节，太字节 拍 B（Petabyte） 1PB = 1024TB，千万亿字节，拍字节 艾 B（Exabyte） 1EB = 1024PB，白亿亿字节，艾字节 泽 B（Zettabyte） 1ZB = 1024EB，十万亿亿字节，泽字节 尧 B（Yottabyte） 1YB = 1024ZB，一亿亿亿字节，尧字节 通配符的使用应用场景： 工作中，远程维护服务器的时候，需要把某一个目录下的某些文件进行修改，但是，这个目录下的文件非常非常多，试想一下：如果这个目录下的文件很多很多，我们单纯敲一个 ls ，有可能会出现 “刷刷刷” 好几屏的情况。 如个应用 ls 快速定位到我们需要修改的这几个文件，此时，通配符 就可以排上用处了。 所谓通配符，是指一些特殊的符号，而这些特殊的符号可以用来代表其它的字符，这个就叫做通配符。 在日常工作中，有两种通配符是最常使用的，一个是 【 * 】， 另一个是 【 ？ 】 通配符 含义 * 代表任意个数个字符 ? 代表任意 一个字符，至少1个 [] 表示可以匹配字符组中的任一一个 [abc] 匹配 a、b、c 中的任意一个 [a-f] 匹配从 a 到 f 范围内的任意一个字符 【 * 】 演示 查找开头为 1 的文件 查找结尾为 1 的文件 注意： 需要加上扩展名，声明文件的类型。 否则无法查找 另外一种方法查找结尾的文件 直接在 相应的节点 前后输入 【 * 】 通配符 【 ？ 】 演示问号只能代表查找一个字符 注意：【 ? 】 只能代表一个字符，而且必须是一个字符，而 【 * 】 号可以代表任意一个字符，即也可以表示无字符 【 [] 】 中括号定义一个匹配的字符组，如果查找到的文件名与 中括号 中的字符相匹配，则输出。eg： 【 [a-f] 】表示 a 到 f 范围内的任意一个字符 切换目录 cd 是英文单词 change directory 额简写，其功能为更改当前的工作目录，也是用户最常用的命令之一 注意：Linux 所有 目录 和 文件名 都是 大小写敏感 的 命令 含义 cd 切换到当前用户的主目录（/home/用户目录） cd ~ 切换到当前用户的主目录（/home/用户目录） cd . 保持在当前目录不变 cd .. 切换到上级目录 cd - 可以在近两次工作目录之间来回切换 相关命令解析 注意： $ 符号前面会提示现在所在的工作目录，我们即便不用 pwd ，同样可以确认当前所在的目录 cd切换到当前用户的主目录（/home/用户目录） cd ~切换到当前用户的主目录（/home/用户目录） cd .保持在当前目录不变 cd ..切换到上级目录 cd -可以在 最近两次 工作目录之间来回切换 相对路径和绝对路径 相对路径 在输入路径时，最前面不是 / 或者 ~ ，表示相对 当前目录 所在的目录位置 绝对路径 在输入路径时，最前面是 / 或者 ~ ，表示从 根目录/家目录 开始的具体目录位置 绝对路径所谓绝对路径，不管当前的所在工作目录是哪里，通过 cd 这个命令，给一个绝对路径的参数，我们都可以准确的切换到目标的工作目录 【 / 】表示 根目录 eg：切换到 python用户的桌面文件夹 相对路径所谓相对路径，就是相对于当前所在目录位置的一个路径，相对路径开始时通常不需要斜线，它只是相对于当前目录所对应的一个文件夹 eg：返回相对于当前路径的上一级目录]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>从零开始的Python学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux终端命令格式]]></title>
    <url>%2F2019%2F04%2F28%2FLinux%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E6%A0%BC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[终端命令格式command [-options] [parameter] 说明： command：命令名，相应功能的英文单词或单单词的缩写 eg：只需要输入命令就可以看到结果的命令： ls（查看当前文件夹的内容）、pwd（查看当前所在的工作文件）、clear（清空屏幕） [-options]：选项，可用来对命令进行控制（执行命令的时候可以做额外的控制），也可以省略 eg：删除目录： rm -r aaa parameter：传给命令的参数，所谓参数，就是执行命令的时候让命令具体去做的事情，我们可以 以参数的形式告诉命令。 参数可以是 零个、一个 或者 多个 eg：需要传递参数给命令的的命令： touch 文件名称（创建文件）、cd 目录名称（切换目录）、mkdir 目录名称（创建目录）、rm 文件名称（删除文件） [ ] : 代表可选（可以有，也可以没有） 查阅命令帮助信息（知道即可）在工作中，很有可能出现一种情况，当我们想使用某一个命令时，这个命令我们明明会，就是想不起来了，出现这种情况时，我们就可以用 查阅命令帮助信息 来速查一下命令对应的是哪一个选项 提示 现阶段只需要 知道 通过以下两种方式可以查询命令的帮助信息 先学习 常用命令 及 常用选项 的使用即可，工作中遇到问题可以借助 网络搜索 - -helpcommand --help 说明： 显示 command 命令的帮助信息 敲 减号 之后，后面跟的是 选项； 而如果接了两个减号，后面跟了一个 help，这是绝大多数终端命令固定的选项，这个选项就能够在终端中显示出命令的简要帮助信息 man这是 Linux 中提供的一种专门的终端命令 man， man command 说明： 查阅 command 命令的使用手册 可以看到帮助信息是满屏的，同时下方有一个帮助信息，【 q to quit 】 ，表示退出帮助信息 man 是 manual 的缩写，是Linux提供的一个 手册，包括了绝大部分的命令，函数的详细使用说明 查看帮助信息的方法使用 man 时的操作键 操作键 功能 空格键 显示手册页的下一屏 Enter键 一次滚动手册页的一行 b 回滚一屏 f 前滚一屏 q 退出 /word 搜索 word 字符串]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>从零开始的Python学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[按钮组]]></title>
    <url>%2F2019%2F04%2F27%2F%E6%8C%89%E9%92%AE%E7%BB%84%2F</url>
    <content type="text"><![CDATA[按钮组通过 按钮组容器，把一组按钮放在同一行里，建议我们与 按钮组插件 联合使用，会出现更好的样式。 现阶段先不使用插件，在后面的阶段会详细讲解插件，接下来了解 按钮组 是如何使用的 1234567 Left Middle default 我们可以看到三个按钮，三个按钮在一个组当中，因为他们连在一起，这就是按钮组最基本的使用 延伸效果：按钮工具栏我们可以根据按钮组来延伸出来一个效果，我们在使用 office办公的时候，上方会有很多很多的选项，比如居中操作，或者是居左、居右，让你的文字字体大小调节； 其实，我们可以使用按钮组来进行调节他们，可以称为： 按钮工具栏 把一组 div ，也就是我们上方演示的一个按钮组，融合在一个工具栏中，叫做 btn-toolbar ，就可以创建一个 按钮工具栏 1234567891011121314151617181920 可以看到现在就是一个工具栏的效果，只需要更换下图标，它就是一个工具栏 注意：为了能够看到图标，我们引入 Bootstrap 的 CSS包 时不使用本地引入，使用 CDN 引入 1 按钮组在不同设备下的尺寸12345678910111213141516171819202122 Left Middle default Left Middle default Left Middle default Left Middle default 嵌套按钮组与下拉菜单这里需要引入 JS文件 和 JQuery文件 1234567891011121314151617 1 2 下拉菜单 点我 点我 垂直排列而且，我们不单单可以嵌套，事实上，我们还可以确定当前的按钮组是以怎样的方式进行排列，比如： 我们现在都是水平，但是我们不要水平了，想让其垂直 1234567 Left Middle default 所以无论是垂直排列还是水平排列，都非常容易操作。 水平为默认，垂直时我们只要加上一个类即可 自适应屏幕宽度现在有一个需求，如果我们需要三个按钮在一排中，而且充满整个屏幕，要怎么操作？ 1234567891011 Left Middle Right 按钮式下拉菜单其实把任意一个按钮放入 buttongroup 中，然后加入适当的菜单标签，它就可以作为菜单的触发器 1234567891011121314151617 按钮式下拉菜单 1 2 3 4 分裂式按钮下拉菜单1234567891011121314151617 分裂式下拉菜单 1 2 3 4 可以看到，它有一个分裂效果，事实上，它是两个按钮 拼合 而成的（按钮组），而给了我们一个错觉 按钮的尺寸那么从哪里添加大小呢？ 我们只需要在 button 中添加即可，因为我们这是分列式的，所以两个都应该给添加上 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960 分裂式下拉菜单 nbsp; 1 2 3 4 分裂式下拉菜单 nbsp; 1 2 3 4 分裂式下拉菜单 nbsp; 1 2 3 4 分裂式下拉菜单 nbsp; 1 2 3 4 箭头向上事实上，我们还可以让向下的箭头向上，因为无论是向下和向上，在我们真正的需求当中都是有的； 我们只需要在外层的 div 当中给它添加上一个 dropup 即可 1234567891011121314151617 分裂式下拉菜单 1 2 3 4]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用Linux命令的基本使用]]></title>
    <url>%2F2019%2F04%2F27%2F%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[学习 Linux 终端命令的原因 Linux 刚面世时并没有图形界面，所有的操作全靠命令完成， 如 磁盘操作、 文件存取、 目录操作、 进程管理、 文件权限 设定等 在职场中，大量的 服务器维护工作 都是在 远程 通过 SSH客户端 来完成的， 并没有图形界面， 所有的维护工作都需要通过命令来完成 在职场中， 作为后端程序员， 必须要或多或少掌握一些 Linux 常用的终端命令 Linux发行版本 中命令大概有 200 多个，但是常用的命令只有10多个而已 学习终端命令的技巧 不需要死记硬背，对于常用命令，用的多了，自然就记住了 不要尝试一次学会所有的命令， 有些命令是非常不常用的， 临时遇到，临时百度就可以 常用的Linux命令的基本使用 小技巧 ctrl + shift + = ： 放大终端窗口的字体显示 ctrl + - ： 缩小终端窗口字体显示 序号 命令 对应英文 作用 1 ls list 查看当前文件夹下的内容 2 pwd print work directory 查看当前所在文件夹 3 cd[目录名] change directory 切换文件夹 4 touch[文件名] touch 如果文件不存在，新建文件 5 mkdir[目录名] make directory 创建目录 6 rm[文件名] remove 删除指定的文件名 7 clear clear 清屏 ls查看当前文件夹下的内容 pwd查看当前所在文件夹 第一个斜线表示 根目录，home表示家目录，yaoremu表示用户名 cd[目录名]切换文件夹 注意： Linux 是 区分大小写 的 touch[文件名]如果文件不存在，新建文件 mkdir[目录名]创建目录 rm[文件名]删除指定的文件名 注意： 使用 rm[文件名] 命令，最直接删除的就是一个文件。 要删除目录时需要一些额外的设置 clear清屏]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>从零开始的Python学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu图形界面入门]]></title>
    <url>%2F2019%2F04%2F27%2FUbuntu%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[Ubuntu的任务栏 搜素按钮任务栏最上方的按钮可以搜素软件 窗口操作按钮 Ubuntu 中，窗口操作按钮在窗口的左上角 菜单条 注意： Ubuntu操作系统 的菜单栏在窗口的最顶端，与 Windows操作系统有区别。 另外，Ubuntu操作系统 的图形界面中同一时间激活的窗口只能有一个]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>从零开始的Python学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[下拉菜单]]></title>
    <url>%2F2019%2F04%2F26%2F%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95%2F</url>
    <content type="text"><![CDATA[下面需要使用到 Bootstrap 的 JS文件 以及 JQuery文件 接下来讲述4个内容点： 字体图标 下拉菜单 按钮组件 按钮式下拉菜单 字体图标可以根据官网给我们的指示来看，首先，先来了解一下组件： 无数个复用的组件，包括 字体图标、 下拉菜单、 导航、 警告框、 弹出框 … Bootstrap官网 一共给我们提供了一共 200个 字体图标，当然这些字体图标也不是它自己的，这些图标是来源于 Glyphicon Halfings 的组织 如何使用 ?使用的时候，出于性能的考虑，所有的图标都需要一个 基类 和 对应图标的 子类，而且之间是有一个空格存在的 eg: 1 而且使用的时候一定要注意，不能和其他组件混合使用，它不能在同一元素上与其他类共同存在。并且，他的使用一定要基于一个 span 标签，也就是所有的图标类必须承载在 span标签 当中 下拉菜单Bootstrap 中也给我们提供了一些下拉菜单的使用 注意： Bootstrap 的 JS 文件是依赖于 JQuery ， 所以使用时先引入 JQuery 1234567891011121314151617 下拉菜单 一 二 三 四 下拉菜单的对齐添加相关类 pull-right 、 dropdown-menu-right 1234567891011121314151617 下拉菜单 一 二 三 四 下拉菜单的标题任何下拉菜单均可以添加一个标题来声明一组的动作，比如： 现在再添加一组不同的内容，有两组不不同的内容可以添加标题来标识 1234567891011121314151617181920212223 下拉菜单 大写一到四 一 二 三 四 小写1到4 一 二 三 四 下拉菜单的分割线如果你认为加字母显得特别难看，因为他会破坏整体的结构，那么可以添加一个分割线 1234567891011121314151617181920212223 下拉菜单 一 二 三 四 一 二 三 四 禁用的菜单项在网页中，当我们选择下拉框时，不是每一项都是可以选择的，有的时候有一些项是不可以选择的，这个时候，就需要一个禁用的菜单项 1234567891011121314151617181920212223 下拉菜单 一 二 三 四 一 二 三 四 可以发现，当鼠标移动到 3 的时候，它是不可以选中的，鼠标样式会变成一个表示不允许的样式]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件和目录（理解）]]></title>
    <url>%2F2019%2F04%2F26%2F%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%EF%BC%88%E7%90%86%E8%A7%A3%EF%BC%89%2F</url>
    <content type="text"><![CDATA[目标： 理解 Linux 文件目录的结构 单用户操作系统和多用户操作系统（科普） 单用户操作系统： 指一台计算机在同一时间 只能由一个用户使用， 一个用户独自享用系统的全部硬件和软件资源 Windows XP 之前的版本都是单用户操作系统 多用户操作系统： 指一台计算机在同一时间可以由 多个用户 使用，多个用户共同享用系统的全部硬件和软件资源 Unix 和 Linux 的设计初衷就是多用户操作系统 Windows 和 Linux 文件系统的区别Windows下的文件系统 在 Windows下，打开“计算机”，我们看到的是一个个驱动器的盘符： 每个驱动器都有自己的更目录结构，这样形成了多个树并列情形，如图所示： Linux下的文件系统 在 Linux 下，我们是看不到这些驱动盘符，我们看到的是文件夹（目录）： Ubuntu 没有盘符这个概念，这有一个根目录 【 / 】 ， 所有文件都在它下面 对于初学者的我们，最关心的就是 【 /home 】 目录，上图所示，在 【 /hone 】 目录下，分别有三个文件夹，分别叫做 【 /itheima 】 、【 /python 】 、 【 /laowang 】，这三个目录表示，这一台电脑在同一时间，可以由三个用户同时来使用，这三个用户名，分别叫itheima、python和laowang； 接下来我们继续看，【 /python 】 这个用户的目录下，还有三个文件夹，分别是 【 /Desktop 】 、 【 /Documents 】 、 【 Downloads 】 ，意味着这三个文件夹，都是属于 【 /python 】 这个用户的，而不属于其他用户； 如果 【 /python 】 这个用户还想存放其他的目录，它可以在 【 /python 】 目录下面建立不同的文件夹，在不同的文件夹存放不同的文件； 在 Linux 下， 因为是多用户操作系统，所以为了保证各个用户互相不冲突，所以 Linux 下面建立了一个非常重要的目录， 【 /home 】 目录，每个用户登录进来，各自在自己的目录下操作，但是不允许到其他用户目录下面操作，这就是 Windows操作系统 和 Linux 操作系统在 目录结构 上面一个非常大的差异 Ubuntu系统结构目录演示和简介Windows首先是 盘符，然后在 盘符 下面有对应的一个有一个文件夹 WINDOWS文件夹： 存储的是 Windows系统相关的文件，如果我们把 Windows文件夹 删掉了，那么整个 Windows系统 就瘫痪了 Program Files文件夹：存储的是我们安装过的应用程序，如果我们把这个文件夹下面的某个文件夹删掉了，那么会导致我们安装的某些应用软件没有办法正常运行了 Ubuntu 上图所示，这就是 Ubuntu 的界面，如果想在 Ubuntu系统 看到我们存储的文件，请点击 文件 ： 会弹出一个窗口，这个窗口的界面结构跟我们熟悉的 WIndows 的界面结构是非常像的，在左边是文件夹的名字，而右边是当前文件夹中又存在着哪些目录 接下来点击 计算机选项， 可以看到，右侧文件夹结构完全变了，同时有一个小细节，在任务栏上面有一个 斜线（ 在 Ubuntu 的系统中，并没有盘符的概念，我们所有的文件都是存放在根目录下的目录，而在 Ubuntu 中，根目录用 【 / 】 来表示 ），现在我们看到的这些文件夹就是存储在根目录下的目录 接下来打开 【 /home 】 目录，可以看到 【 /python 】 文件夹 那么如何来确认用户呢，我们可以点击右上角的一个 小齿轮 我们可以看到，这里有一个 Python用户，这个 Python用户 就说明我们当前登录的用户名就叫做Python，而我们在文件窗口中看到的 Python 文件夹上面有一个小房子，这个小房子就表示这个文件夹就是 Python 用户的家目录，Python 用户如果想要处理文件，就应该在自己的家目录中来进行 接下来双击小房子，我们可以看到左侧的 Home 已经高亮了，同时在右侧，显示了一些文件夹，就是保存在家目录中，默认的文件夹，其中就包括了 桌面、 文档 、 下载 等等 其他的目录Ubuntu 中，根目录下面，除了 【 /home目录 】 之外，还有其他很多的文件夹，这些文件夹有什么用呢？ /: 根目录 ： Linux下面，没有 盘符 的概念，整个磁盘最开始就是从根目录开始的 /home目录： 表示在根目录下的 home文件夹 ，而我们每个用户的文件夹都是保存在家目录中的 /etc目录： 保存一些配置文件，在一些服务器相关的配置内容，而涉及到服务器相关的配置文件，通通都是保存在 【 /etc目录 】 下的 /bin目录： 在 【 /bin目录 】 下，会保存 可执行的二进制文件，绝大多数的终端命令都是保存在 【 /bin目录 】 下的 以上是现阶段需要掌握的目录，而其他的目录可以在后续对 Linux 的使用逐渐熟悉之后，通过一些网络上一些资料去了解每个文件夹下面，都是分别保存什么样类型的文件就可以了 注意： 在 Ubuntu 的系统下，除了 【 /home目录 】 之外，整个系统的文件都是保存在 【根目录文件夹】 下面的。这句话就是在提醒我们，这里面任何一个目录我们不要因为不认识就删掉，如果把这里面的一些目录删掉了，就相当于删除了系统的文件，会导致整个系统的奔溃。所以操作的时候，所有的文件操作，尽量放在我们自己的 【 /home目录 】 下进行，而千万不要动外面的根目录]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>从零开始的Python学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML5编辑API之Range对象]]></title>
    <url>%2F2019%2F04%2F25%2FHTML5%E7%BC%96%E8%BE%91API%E4%B9%8BRange%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[课程概要 Range对象 Range对象的基本概念 selectNode / SelectNodeContents / deleteContents 方法 setStart / setEND setStartBefore / setStartAfter /setEndBefore / setENDAfter 方法 Range对象的基本概念一个 Range对象 代表页面上的一段连续区域。 通过 Range对象 ， 可以获取 或 修改网页上的任何区域 12345678910111213141516171819202122function rangeTest(){ var html; showRangeDiv = document.getElementById("showRange") //获得选取的内容 selection = document.getSelection() if(selection.rangeCount>0){ //获得选取内容的个数 html = "你选取了>"+selection.rangeCount + "]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[按钮和图片]]></title>
    <url>%2F2019%2F04%2F25%2F%E6%8C%89%E9%92%AE%E5%92%8C%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[按钮在 Bootstrap 中，它给我们提供了很多样式的按钮。 比如说： 默认的、成功的、信息的、警告的或者链接的等等 123456789 default //默认 primary success //成功 info //信息 warning //警告 Link //链接 danger //危险 通过栅格系统，改变按钮的大小 123456 info info info info 可以通过设置 【 btn-block 】 属性让按钮充满父级容器1hello 那我们只能使用 button 吗？不是的。 通常情况下，button元素 和链接 a元素 是比较相似的，我们在 a 元素中也可以这么来用，eg： 1default 可以看到，其实它的区别与 按钮 的区别并不大，只不过按钮是未激活的，而 a标签 是激活的，并且比较大。 所以我们不单单只能使用 button 也可以使用 a标签 去替代掉 button，因为我们在多数开发的时候，a标签 出现的几率要高一些 也可以使用 input标签 来表示按钮; eg: 1 可以看到，几种不同设置按钮的方法差别并不大，所以可以根据自己的需求随意来进行使用，需要注意的是，作者建议我们使用 button ，因为像 input 在 Firefox 中可能会出现一些问题，可能会有bug，它的 高 的办法是没法统一的 图片在现代的 Bootstrap 版本中，它的图片也是响应式图片变化，它是如何做到的呢？ 它是把它的宽度，设为最大化，而高度自适应，但是这样会导致图片失帧，所以我们可以采取 SVG 的方式，去给它不失帧或者改变样式。 它也提供了一些圆角图片的效果 123 //圆形图片 //自带圆角的正方形图片 //自带边框效果 SVG（可缩放矢量图形）：可缩放矢量图形是基于 可扩展标记语言（标准通用标记语言的子集），用于描述二维矢量图形的一种图形格式]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bootstrap CSS表单、按钮和图片]]></title>
    <url>%2F2019%2F04%2F24%2FBootstrap-CSS%E8%A1%A8%E5%8D%95%E3%80%81%E6%8C%89%E9%92%AE%E5%92%8C%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[表单接下来介绍表单中几种最基本的实例： 内联表单 水平排列的表单 被支持的控件 静态标签 焦点状态 禁用状态 只读状态 校验状态 控件尺寸 辅助文本 eg: 123456789101112131415 email 密码 选择文件 选择你的文件 内联表单创建一个内联表单，需要加上一个类 【 class=”form-inline” 】 表单的默认样式的宽度是 100% 的，如果将其变为内联的方式，它的宽度就会 auto（自适应），并且变为了 1 行 关于 label ：必须设置 label ，如果不设置 label，屏幕阅读器是无法正确识别的； 如果实在不需要，可以选择将其隐藏，使用 【 class=”sr-only” 】 属性 123456789101112131415 email 密码 选择文件 选择你的文件 水平排列的表单有的情况下我们会使用到水平排列的表单，而且有的时候回根据内容和页面的布局来调整一下它的布局方式, 设置类为 【 class=”form-horizontal” 】 水平排列的表单需要我们主动去设置布局效果 由于默认的 水平排列 布局有点怪异，所以下面虎用到 栅格化表格 来进行表单的布局 12345678910111213141516171819202122232425262728293031 Email password 记住密码 登录 被支持的控件12345678910111213141516171819202122232425262728293031323334353637383940414243 //文本 //多行文本 Hello //复选框 吃橘子 吃苹果 //单选框 男 女 //下拉列表 //multiple属性： 表示显示所有选项 1 2 3 4 role属性 的作用是描述一个非标准的 标签 的实际作用； 比如用 div 做 button，那么设置 div 的 role = “button” ， 补助工具就可以认出这实际是个 button 静态标签静态标签，用来提示用户以怎样的的方式进行输出和输入 1请按照我的格式输入： hello@163.com 焦点状态当我们在其中一个输入框中选中的时候，可以发现其实是有一个焦点存在的，他会有一个阴影的效果，box-shadow，这就是它的一个焦点，如图： 禁用状态事实上我们在使用一些输入框，或者是点击按钮的时候，它有可能是不允许输入或者是禁用的状态，在 Bootstrap 中也有提供 1 可以看到，当鼠标移上去的时候，有一个禁用的小圆圈，代表当前是不可以使用的 禁用整个表单123456789101112131415161718192021222324252627282930313233343536373839404142434445 //文本 //多行文本 Hello //复选框 吃橘子 吃苹果 //单选框 男 女 //下拉列表 //multiple属性： 表示显示所有选项 1 2 3 4 可以看到，每一个内容都是不可选的，这样可以方便我们，不需要一一设置 只读状态12345 只读 与 不可选 是有 不一样 的点的，只读就是只读，不可选就是不可选的，我们可以后期去更改它的一些状态效果等等 校验状态事实上我们在看一些网页的时候，经常会有一些输入框会给我们一些提示，比如说成功了，或者是警告，密码不安全，或者是错误不允许输入 在 Bootstrap 中，对表单也有一个状态，比如说 success、 warning、 error、 ，使用它们只需要来添加一些简单的属性即可，添加到父类当中 1234567891011121314 //黄色 用户名 //绿色 用户名 //红色 用户名 如果感觉颜色不够明显，我们还可以添加图标,想要指定它的图片，我们可以根据官网给我们提供的组件： 在组件当中有很多的小图片，比如说我们需要一个表示成功的图片，那我们就找到相应图标，自己复制提供的字符串，直接黏贴到 class 中即可： 1234567891011//先换一个网络地址的 CDN //黄色 用户名 //用一个 span 来承载图片元素 其实它还可以 控制尺寸，是根据栅格系统来控制尺寸的，直接给它栅格多少个格就可以了 eg: 123456789101112//先换一个网络地址的 CDN //通过栅格控制控件大小 //黄色 用户名 //用一个 span 来承载图片元素 辅助文本对于辅助文本，我们只需要在 span标签 中给它添加一个 class，class的名称可以为 help-block 即可，此处就不再演示]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[操作系统（科普章节）]]></title>
    <url>%2F2019%2F04%2F24%2F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E7%A7%91%E6%99%AE%E7%AB%A0%E8%8A%82%EF%BC%89%2F</url>
    <content type="text"><![CDATA[操作系统简介操作系统作为接口的示意图 没有安装操作系统的计算机，通常被称为 裸机 操作系统 概述 如果想在 裸机 上运行自己所编写的程序， 就必须用机器语言书写程序 如果计算机安装了操作系统，就可以在操作系统数安装支持的高级语言环境，用高级语言开发程序 操作系统可以直接与硬件打交道 机器语言： 计算机语言就是各种不同的 “0” 、 “1” 的组合 系统调用操作系统把所有跟硬件打交道的工作封装成了系统调用，系统调用可以理解为一个方法，举个例子：叫CPU “干活”，机器就会把系统调用翻译成对应的 “0101…” ，这样就可以让CPU做一个 加法、减法 的运算等等…，这样就叫做系统调用 系统调用的好处作为程序员要开发各种各样不同的软件，在开发软件的时候，如果操作系统提供了不同的系统调用，那么我们就可以直接来调用操作系统提供的方法，而不再需要跟 “0101” 这些枯燥的数字打交道，这就是操作系统提供系统调用的作用 小结操作系统有两个作用 可以 直接 控制各个不同的硬件进行工作 第二个作用是把操作硬件的这些方法 *封装 成一个又一个系统调用，供程序员直接访问，简化程序员的工作 举个例子：播放音乐假如我们 硬盘 有一首好听的歌曲，我们听这首歌曲就得先安装音乐播放的软件（应用程序），然后打开 软件 ，查找歌曲后点击播放 硬件的工作情况 将存放在硬盘上的歌曲从硬盘上读取出来，加载到内存 使用声卡对内存中的音频数据进行解码 再把解码后的数据发送给音箱 我们想象一下，如果我们在播放音乐时，先要写一大堆 “0101” 从硬盘上把歌曲加载到内存中，再写一大堆 “0101” 让声卡对内存中的歌曲进行解码，解码后再让声卡对 解码后的数据发送给音箱，这时，我们才能听到音乐。 十分繁琐！ 操作系统的工作情况 将硬盘、内存 与 声卡 的操作全部封装成系统调用 程序员开发音乐播放器的时候，只需要通过系统调用，从硬盘加载歌曲，然后进行解码，最后直接播放就 OK 了 ！！！ 不同应用领域的主流操作系统针对应用方向不通，可以分为四大类 桌面操作系统 服务器操作系统 嵌入式操作系统 移动设备操作系统 桌面操作系统Windows系列 用户群体大 优点：版本多、应用软件多，十分方便 缺点：安全性和稳定性差 macOS 适合于开发人员 ，基于 Unix 优点：安全性和稳定性要远远高于 Windows的操作系统，而且为程序员提供了非常好的开发环境配置 ！！ ！！ Linux 应用软件少 优点： 适用于服务器 、嵌入式 领域缺点： 应用软件少，不方便 服务器操作系统 从两个方面来理解服务器，分别是 硬件方面 和 软件方面 硬件方面： 所谓服务器就是一台电脑； 虽然外表与平时的 电脑 有所不同，但是它就是一台电脑； 软件方面： 有了硬件的电脑之后，我们就要在电脑上安装一个软件的操作系统，然后就可以对服务器进行维护和管理 服务器为什么装在大柜子里？而且房间很奇怪？ 这个房间通常称为 机房，所谓机房，是一个专门提供稳定带宽的地方，有了稳定的带宽之后，全世界各地的用户就可以通过互联网络来访问我们存在在服务器上的资源了； 譬如：我们可以打开浏览器来搜索百度，百度实际上是把 服务器 放在类似的机房里， 而用户在家里只需要打开浏览器，输入百度的网站，就可以找到这台服务器提供的资源了 机房里没有显示器、也没键盘和鼠标，那我们是如何进行维护的？通常，一个公司要把服务器放在机房之前，先要买一台电脑，买完电脑并在公司完成安装后，就拖到机房里，往机架上一装，简单配置一下 IP地址，工作人员就可以离开了； 接下来只要在我们的电脑上 安装一个软件 ，通过这个软件，我们就可以在任何地方 远程 登录服务器，对服务器进行维护以及日常的管理注意： 平时人是不会在机房里面的，因为机房里面 温度非常低，而且噪音非常大，人无法在里面长时间工作； linux 安全、稳定、免费 占有率高 linux服务器相比较 Windows Server而言，它的安全性，稳定性要比 Windows Server 高很多，而且 linux 是完全免费的； 另外，作为 linux而言，它在服务器方面 提供的相关的配套软件要比 Windows Server 齐全多得多 有关 python： 学习 python 就是为了来做 Web开发， 所谓 Web开发，就是用 python 来开发一个 Web服务器 Windows Server 付费 占有率低 各种类型的操作系统嵌入式操作系统所谓嵌入式开发，就是来开发一些只能硬件、智能机器人、智能家居等等的这些开发，随着时间的推移，经过市场的历练，现在在嵌入式开发领域，操作系统基本上是 Linux操作系统 一家独大了，为什么呢？ 因为 Linux 内核非常的小，而且是开源的，并且开发商可以根据自己的需求自行的定制，它在使用起来非常的简单； Python 这门语言，在人工智能领域以及深度学习领域非常的火爆，同时，Python 这门语言可以在 Linux 上正常的运行，因此要做智能硬件以及人工智能领域的开发，Linux 操作系统的学习也是必不可少的 移动设备操作系统 IOS Android（基于 Linux） 实际上，在以前，移动设备操作系统是归属于嵌入式开发的，因为嵌入式开发里面有个很重要的领域，就是开发智能手机和智能平板的，但是随着时间的推移： 在移动设备领域，现在几乎都是被苹果公司的 IOS操作系统 和 谷歌公司的安卓操作系统所垄断了，至于曾经的王者，例如：塞班、黑莓，以及现在默默努力的微软，在移动市场上并没有多大的市场占有率 如今，在以移动市场上，基本上就是苹果的IOS，和谷歌的安卓两大操作系统， 小科普： 安卓操作系统实际上也是由 Linux操作系统衍生出来的 虚拟机 虚拟机 （Virtual Machine） 指通过 软件 模拟的具有完整硬件功能的、运行在一个完全隔离的环境中的完整计算机系统 虚拟系统通过快速生成现有的操作系统的虚拟镜像，具有真实操作系统完全一样的功能 进入虚拟系统后，所有操作都是在这个全新的独立的虚拟系统里面进行，可以独立安装运行软件，保存数据，拥有自己的独立桌面，不会对真正的系统产生任何影响 而且能够在现有系统和虚拟镜像之间灵活切换的一类操作系统 安装虚拟机最大的好处，就是当我们想学习一个陌生的操作系统的时候，可以在不破坏已有的操作系统的基础上，安装一个全新的操作系统，在全新的操作系统中， 尽情的玩耍 ， 玩坏了就重装一遍就好了，不会对原有的操作系统产生任何影响 操作系统的作用是用来管理硬件设备的 操作系统的发展史操作系统的发展历史Unix1965年之前的时候，电脑并不像现在一样普遍，它课不是一般人能碰的起的，除非是军事或者学院的研究机构，而且当时大型主机至多能提供30台终端（30个键盘，显示器），链接一台电脑 为了解决数量不够用的问题： 1965年左右由 贝尔实验室 加入了 麻省理工学院 以及 通用电气 合作的计划 –该计划要建立一套 多使用者（multi-user）、多任务（multi-processor）、多层次（multi-level）的 MULTICS 操作系统，想让大型主机支持300台终端 1969年前后这个项目进度缓慢，资金短缺，贝尔实验室退出了研究 1969年从这个项目退出的 Ken Thompson 当时在实验室无时， 为了让一台空闲的电脑上能够运行 ‘星际旅行（Space Travel）’游戏，在8月份左右趁着妻子探亲的时间，用了一个月的世界，使用 汇编 写出了 Unix 的操作系统的原型 1970年，美国贝尔实验室的 Ken Thompson，以 BCPL语言 为基础，设计出很简单且很接近硬件的 B语言（取BCPL的首字母）， 并且他用 B语言写了第一个 UNIX 操作系统 1971年， 同样酷爱‘星际旅行（Space Travel）’的 Dennis M.Ritchie 为了能早点玩上游戏，加入了 Thompson 的开发项目，合作开发 UNIX，他的主要工作是改造 B语言，因为 B语言 的跨平台性较差 1927年， Dennis M.Ritchie 在 B语言 的基础上最终设计出了一种新的语言， 他取了 BCPL 的第二个字母作为这种语言的名字这就是 C语言 1973年初， C语言 的主题完成， Thompson 和 Ritchie 迫不及待的用它完全重写了现在大名鼎鼎的 Unix操作系统 C语言 在把 UNIX 一直到其他类型的计算机上使用时， C语言 强大的移植性（Portability） 在此显现 机器语言和汇编语言都不具有移植性，为 x86 开发的程序，不可能在 Alpha，SpaRC 和 ARM 等机器上运行 而 C语言程序 则可以使用在任意架构的处理器上，只要那种架构的处理器具有相对应的 C语言编译器和库，然后将C源代码编译，连接成目标二进制文件之后即可运行 UNIX家谱 Minix 因为 AT&T（通用电气） 的政策改变，在 Version 7 Unix 推出之后，发布新的使用条款，将 UNIX源代码 私有化，在大学中不再能使用 UNIX源代码 在私有化之后，只有一些大的公司才能够使用（如图，右下红色区域），主要在小型机市场上来使用 UNIX 操作系统 在图中间会有一个黄色的分支，这个分支是从 麻省理工学院 分出来的一套 UNIX操作系统，这个操作系统仅在 麻省理工学院 的范围内进行扩展，后来就延展出一套开源免费的叫做 Free BSD 的操作系统，但是，随着历史的发展，尤其是后来 Linux操作系统 异军突起之后， Free BSD 的用户就越来越少了；现在绝大多数人都是 Linux操作系统 的忠实粉丝 肯.汤姆逊开发出 UNIX操作系统后，贝尔实验室工作人员都广泛使用 UNIX操作系统； 而 UNIX 操作系统最开始设计的初衷是 多用户的操作系统（多个用户能够在同一时间登录到同一个电脑上使用的操作系统）；但是，肯.汤姆逊 可以以超级用户的身份登录到任何一个人的 UNIX操作系统 上，即在其他的终端上登录到其他人的电脑，这 显然是不行的； 于是 贝尔实验室 就开始对 UNIX 操作系统的源代码进行了彻底的排查，排查之后找到了 肯 在 UNIX 中留下的后门，然后把后门修改之后，重新编译并且部署了操作系统，以此来解决这个问题。 但是，在他们排查了后门之后， 肯 依旧可以以超级用户的身份登录到任意一台电脑上； 导致最后 通用电气公司 认为 UNIX 操作系统的源代码不能公开，如果公开出来，其危险性太大，于是，1979年之后，他们就把 UNIX 操作系统源代码完全的私有化，而不再允许其他人使用。 Andrew S.Tanenbaum（塔能鲍姆）教授为了在课堂上教授学生操作系统运作的细节，决定不再使用任何 AT&T 的源代码的前提下，自行开发与UNIX兼容的操作系统，以避免版权上的争议 以 小型UNIX（mini-UNIX）之意，将他取为MINIX（教学为主） Linux 1991年 林纳斯（Linus） 就读于赫尔辛基大学期间，对 Unix产生浓厚兴趣， 尝试在 Minix 上做一些开发工作 因为 Minix 知识教学使用，因此功能性不强， 林纳斯 经常要用他的终端 仿真器（Terminal Emulator）去访问大学主机上的新闻组合邮件， 为了方便读写和下载文件， 他自己编写了磁盘驱动程序和文件系统， 这些在后来成为了 Linux 第一个内核的雏形， 当时， 他年仅 21 岁！ 林纳斯 利用 GNU 的 bash 当做开发环境， gcc 当做编译工具，编写了 Linux内核， 一开始 Linux 并不能兼容 Unix 即 Unix 上跑的应用程序不能再 Linux 上跑，即应用程序与内核之间的接口不一致 一开始 Linux 只适用于 386，后来经过全世界网友的帮助，最终能够兼容多种硬件 Linux内核版本与发行版本内核（kernel） 系统的心脏，是运行程序和管理像磁盘和打印机等硬件设备的核心程序，它提供了一个在裸设备与应用程序的抽象层 Linux内核版本又分为 稳定版 和 开发版， 两种版本是相互关联，相互循环 终端命令操作系统把硬件设备的管理，封装成一个又一个系统调用，方便其他的应用程序间接的管理硬件设备。由于 内核中 只有对硬件的基础访问以及系统的调用，操作的时候不方便，所以有了 终端命令 林纳斯开发 Linux 内核的时候，他封装完系统调用之后，然后为了检测系统调用是否正确，同时方便自己对硬件的操作，就包装了一个又一个终端命令，由这些终端命令来调用系统调用，间接的来操作电脑的硬件设备 在Linux内核内部，有两个重要的组成部分，一个是系统调用，方便其他的应用程序间接的访问硬件； 另外一个是 终端命令，同样是来调用所有的系统调用，然后同样也是来达到硬件管理的目的； 这样，一个Linux内核 就可以完整的自主操作 操作系统有两个作用： 管理所有的硬件设备 系统调用 发行版本所谓发行版，是一些有志向，想要开发操作系统的入。 比如：如果我们能自己开发一套操作系统，是不是就很高大上了！ 但是面对市场上茫茫多的硬件，如果我们要开发操作系统，把市场上所有的硬件设备的接口，全部自己写一遍，太消耗时间了！ 为了提高开发速度，这些开发操作系统的入，就看中了 Linux内核，既然 Linux内核 已经做到了跟所有的硬件配合的工作，那么我们就可以在 Linux内核 的基础上，来搭建另外一套 应用程序，这一套应用程序中，包含有桌面系统、基本的图形界面操作、桌面应用程序、一些桌面小游戏等等，这一套桌面的应用系统，就可以打包作为 Linux发行版； 注意：这一套 Linux发行版，在发布的时候，是包含有 Linux内核的，是两个完整的一体，共同发布的； Linux发行版，想要操作硬件，应该怎么做？既然内核已经封装好系统调用，那么发行版就不再负责与各种各样的硬件打交道，发行版直接通过 Linux内线 提供的系统调用，就可以间接的访问所有的硬件了 常见的发行版本如下： Linux发行版（也被叫做GNU/Linux发行版）通常包含了包括桌面环境、办公套件、媒体播放器、数据库等应用软件 Ubuntu Redhat Fedora openSUSE Linux Mint Deblan Manjaro Mageia CentOS Arch 其中 Ubuntu（乌班图）最为优秀，这也是推荐使用 Ubuntu 系统的原因； eg: 注意： 内核只有一个！！！注意： 内核只有一个！！！注意： 内核只有一个！！！]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>从零开始的Python学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bootstrap CSS栅格、代码和表格]]></title>
    <url>%2F2019%2F04%2F23%2FBootstrap-CSS%E6%A0%85%E6%A0%BC%E3%80%81%E4%BB%A3%E7%A0%81%E5%92%8C%E8%A1%A8%E6%A0%BC%2F</url>
    <content type="text"><![CDATA[CSS栅格概述设置全局的CSS样式，基本的HTML元素均可以通过 class 设置，并且得到增强的效果，而且 Bootstrap着重介绍了 栅格系统（grid system）,也就意味着 栅格系统 非常重要，使用起来非常方便 Containers 容器栅格系统是 依赖容器 而存在的，Bootstrap 需要为页面内容和 栅格系统 包裹一个 容器Containers 好处给我们提供了一些 padding 属性，也就是像 margin 属性都有去设置一下，所以我们在使用的时候一定要包裹一个容器 123 ... 或者是使用下面这种方式，表示 百分百最宽 ，也就是能达到最大的使用范围，占据全部视口的整个容器，一般使用 container 即可 123 ... Grid systemBootstrap 给我们提供了一套响应式、移动式设备优先的流式栅格系统，它会随着屏幕的视口尺寸进行增加，系统也会自动最多分配，这里我们要记得是 12列 ，不管是在什么设备上，它最多只能承载 12列 介绍它必须通过 container 进行承载，栅格系统通用于一些系列的行与列的组合来创建一些页面布局，它有点类似于表格，但是使用起来确比表格方便得多 栅格的参数 Gird behavior 栅格系统行为表示以怎样的方式来布局 针对于不同屏幕 手机 平板 偏小桌面显示器 偏大桌面显示器 < 768px >= 768px >= 992px >= 1200px 布局方式针对于栅格系统的行为，其实就是它以怎样的方式来布局； 手机上的肯定是水平排列，在后面会有一些堆叠，然后根据屏幕的大小来自动释放 Container width 最大宽度 手机 平板 偏小桌面显示器 偏大桌面显示器 自适应 最大750px(它受最外层屏幕的限制) 790px 1170px Class preflx 前缀它给我们提供了所有的样式的使用我们必须遵循它所提供的 class 方式来进行书写，这一行是它针对不同屏幕的书写格式 手机 平板 偏小桌面显示器 偏大桌面显示器 .col-xs- .col-sm- .col-md- .col-lg- of columns 列数默认为 12列 最大的列宽 手机 平板 偏小桌面显示器 偏大桌面显示器 自适应 ~62px ~81px ~97px Gutter width 槽宽默认为 30px 其他另外它是 可嵌套的、 可偏移的 与 可以使用 列的排序 例子1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586 .row{ margin-bottom: 20px; } .row .row{ margin-top: 10px; margin-bottom: 0px; } //通配方式： [class*="col-"] 选择所有类名中含有"col-"的元素 [class*="col-"]{ padding-top: 15px; padding-bottom: 15px; background-color: #eee; background-color: rgba(88,61,124,.15); border: 1p solid #ddd; border: 1px solid rgba(86,61,124,.2); } //注意：最大只能承载12个 //class名字 后面的数字表示当前所占的比例，1 代表 1/12 col-md-1 col-md-1 col-md-1 col-md-1 col-md-1 col-md-1 col-md-1 col-md-1 col-md-1 col-md-1 col-md-1 col-md-1 //一行承载4个 col-md-3 col-md-3 col-md-3 col-md-3 //如果内容过多，它采取自适应，自动调整高度或宽度 col-md-3col-md-3col-md-3col-md-3col-md-3col-md-3col-md-3col-md-3col-md-3col-md-3 col-md-3 col-md-3 col-md-3 //偏移 col-md-offset-偏移的个数 col-md-3 //嵌套 one first two //列的排序 col-md-9 col-md-3 CSS代码它的作用就是当我们想在网页中展示一些代码的时候，我们肯定要用到 code，比如我们会写个人博客，个人博客当中我们会 拷贝 一些代码放在上面供别人进行参考，这个时候我们就应该有一些关于代码的输入，那么它包含内联代码、用户输入、代码块、变量和程序输出 内联代码12345//这里我们不必要一定要使用容器，我们只是习惯性把容器放最外层 //我们通过 code标识 来包裹要作为代码片段的内容 For example & lt;section& gt; as inline eg: 我们可以看到代码的样式，它包含了一个尖括号以及背景和颜色突出的一个效果 用户输入单个字符用户输入在 Bootstrap 当中它模仿的是有命令行的输入方式的一个样式 123 我希望现在能键入 cmd 命令 eg: 这里我们可以看到，这个 cmd 明显是一个黑色包裹起来的代表它是一个用户输入 代码块12345 Sample text here...; eg: 可以看到它会有一个外边框，可以在里面加一些实体，比如说尖括号或者其他的一些实体效果。这里面的内容是可以直接复制的 变量123 x = y + z eg: 可以看到他是有一个 斜体的效果 程序输出123 hello world eg: 它没有什么特殊我们可以在页面上看到的一个效果，但是一般程序输出用这种方式来进行表示，既然它给我们了，我们就可以进行使用 CSS表格表格可以分为分为： 基本表格 条形状表格 带边框的表格 鼠标悬停的效果 紧凑型表格 状态类的 响应式表格 表格的样式修改，只需要修改 table 中的 class 即可 基本表格12345678910111213141516171819202122232425262728 表格标题 表格标题 表格标题 表格单元格 表格单元格 表格单元格 表格单元格 表格单元格 表格单元格 表格单元格 表格单元格 表格单元格 条形状表格条形状表格也可以称为 斑马线表格 123 ... 带边框的表格123 ... 鼠标悬停的效果123 ... 紧凑型表格123 ... 状态类的状态类主要是给单元格添加一些颜色来进行标识，它提供了 5 种，分别是： 鼠标悬停在单元格上所设置的颜色 成功的颜色 信息颜色 警告颜色 危机，或者潜伏在一些负面影响的动作的颜色 1234567891011121314151617181920212223242526272829303132333435363738 /灰色/ 表格标题 表格标题 表格标题 //绿色 表格单元格 表格单元格 表格单元格 //蓝色 表格单元格 表格单元格 表格单元格 //黄色 表格单元格 表格单元格 表格单元格 //红色 表格单元格 表格单元格 表格单元格 表格单元格 表格单元格 表格单元格 响应式表格响应式的操作我们需要在最外层创建一个 div 并且添加 【 table-responsive 】， 该表格样式当展示不完全的时候，其下方就会出现一个滚动条，让我们可以看全所有内容，eg： 1234567891011121314151617181920212223242526272829303132333435363738 表格标题 表格标题 表格标题 表格单元格表格单元格 表格单元格表格单元格 表格单元格表格单元格 表格单元格表格单元格 表格单元格表格单元格 表格单元格表格单元格 表格单元格表格单元格 表格单元格表格单元格 表格单元格表格单元格 表格单元格表格单元格 表格单元格表格单元格 表格单元格表格单元格 表格单元格表格单元格 表格单元格表格单元格 表格单元格表格单元格]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[全局CSS样式-排版]]></title>
    <url>%2F2019%2F04%2F22%2F%E5%85%A8%E5%B1%80CSS%E6%A0%B7%E5%BC%8F-%E6%8E%92%E7%89%88%2F</url>
    <content type="text"><![CDATA[由于我们暂时只是测试，所以我们不用去添加刚才我们所添加的那个响应式布局的标题 排版排版包含：标题、页面主体、内联文本元素、对齐、改变大小写、缩略语、地址、引用 和 列表 标题HTML5 中，所有标题标签从 H1 ~ H6 均是可以使用的，另外还提供了了 【 .h1 】 ~ 【 .h6 】 类，为的是给内联属性的文本赋值一些标题的样式 在标题后面通常会有一个相对于标题小一点甚至颜色淡一点的副标题，它也提供了一个 small 标签来进行赋值操作， 也提供了 【 .small 】 类的元素来作为副标题 注意： 它与最基本的 H1 ~ H6 （不使用 Bootstrap） 还是有区别的 12345678 姚大帅哥 姚大帅哥 姚大帅哥 //副标题 姚大帅哥欢迎你的到来 页面主体Bootstrap 将全局的 fontSize（字体大小） 设置为14px，行高设置为1.428，这些属性直接赋值 body，所有的段落元素都可以生效。 另外 p标签还被设置了等高为二分之一行高，也就是 10px的底部外边距 1234hellhellohellohellohellohellohello//突出显示操作hellhellohellohellohellohellohello 文本内联元素1Hello World: 姚钊超级大帅哥 提供了类似于被删除文本的标签: del 无用文本标签： s 插入文本： ins 带下划线的文本: u 还有很多类似于小号文本，着重斜体等等…. ，它都提供了相应的使用，这些都可以参考它所给出的 API 来进行写，因为只是非常简单的通过它所给定的的标签来使用即可 文本的对齐123456//居左你好吗？//居右你好吗？//居中你好吗？ 改变字母的大小写123456//全部小写ABC//全部大写DEF//首字母大写hij 缩略语1hellohellohellohellohello eg: 地址123456 姚大帅哥 广东省汕头市潮阳区 上地三街，超级大厦，1008 P:8888 8888 列表没有样式的列表12345]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[入门例子创建]]></title>
    <url>%2F2019%2F04%2F22%2F%E5%85%A5%E9%97%A8%E4%BE%8B%E5%AD%90%E5%88%9B%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[在 Bootstrap官网 我们在它展示的例子中我们可以看到一个简单的例子，只有导航和文字的页面 接下来我们完成这样一面的搭建，我们来看一下，Bootstrap 来完成这样一个页面到底有多简单，以及他给我们封装的样式到底如何使用 现在暂时先不考虑这个页面中我们为什么要使用它所给定的一些固定的格式 12345678910111213141516171819202122232425262728293031323334353637383940414243//添加一个 meta标签 因为它是一个响应式布局，我们通过一个 meta标签来设置//主要是提供自适应功能，表示宽度等于当前设备的宽度，缩放比例是当前不缩放//首先导入 Bootstrap 的Css文件: bootstrap.min.css body{ padding-top: 50px; } .starter{ padding: 40px 15px; text-align: center; } Project Name Home About Contact //自定义类 Bootstrap starter template 钊哥帅到爆炸钊哥帅到爆炸钊哥帅到爆炸钊哥帅到爆炸钊哥帅到爆炸钊哥帅到爆炸钊哥帅到爆炸钊哥帅到爆炸钊哥帅到爆炸钊哥帅到爆炸钊哥帅到爆炸钊哥帅到爆炸钊哥帅到爆炸钊哥帅到爆炸钊哥帅到爆炸钊哥帅到爆炸钊哥帅到爆炸 eg:]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[素描]]></title>
    <url>%2F2019%2F04%2F22%2F%E7%B4%A0%E6%8F%8F%2F</url>
    <content type="text"><![CDATA[如何排线握笔姿势将铅笔放在四根手指的上面，大拇指盖住它，食指和拇指用力，剩余的三根手指收起，握住笔 eg: 注意： 握笔千万不要太用力，要保持一个放松的状态，让自己的手腕保持放松（软下来） 排线手法运腕法最基本的排线手法； 排线过程中是手腕在运动，整个手凌空于整个画面之上，并没有压在画面上去画 要点 靠手腕的力量去运动，快速的铺出均匀而密集的线条 运腕法多用于 大面积 的绘画 eg: 注意： 线条不是来回的画，每一根线条都是独立的 小拇指支撑运腕法使用上面讲述的握笔姿势，将小拇指提出来，顶在画面上 特点 边缘整齐 画出线条的力道比运腕法更大 线条更加的密集 小拇指支撑运腕法多用于 小面积 的绘画 eg: 运臂法运笔法所画出的线条比较大,比较直，所以运臂法是用来画直线的； 素描中的长直线是用来 起型 ： 在画面的一开始用来定型，比如说要花一个玻璃瓶，就先得知道玻璃瓶有多高，有多低，具体有多宽，之后再这个范围里面去再去找它的具体形状eg: 绘画步骤 长直线是运用在起型的阶段 之后再用运腕法画出样式 最后用小拇指运腕法去塑造细节（局部） eg: 写字方式应用在塑造更加精确的形体，运用写字的方式来对画面进行绘画时，可以使画面更加精准，可以很清楚的确定自己要画的范围 eg: 练习方式千万不要一直保持一个方向去排，因为练习久了，你的手可能就只熟悉这种方向排线的手感；所以，练习运腕法的时候，第一遍排过来之后，第二遍就稍微倾斜一个角度（倾斜 15度 最适合） 注意： 运臂法 练习时千万不要犹豫， 一定要快、 准、 狠 练习大概一星期，培养出一种基本的手感 手感： 手感来自我们长期的练习，手对铅笔的记忆，只有不断地练习，手感会越来越顺手，越来越强， 画什么的都会得心应手 可能在一开始的时候，总是想着线条有没有画好，可是画到后面手感越来越好之后，你所在乎的就不是线条了，它已经变成了你的一个本能 线条的讲究均匀和稳定需要排的足够密集，长短差不多就够了 轻 — 重 — 轻（不强制要求）线条的两边的感觉是轻的，中间会比较踏实一点 轻–重–轻 的优点： 当使用 轻重轻 的线条进行一个衔接； 当两头轻的线相交，它就变成了一个稍微重一点的颜色； 这样的线条排出来的画面很均匀，具有美感 eg:]]></content>
      <categories>
        <category>素描</category>
      </categories>
      <tags>
        <tag>画画</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML5增强的页面元素]]></title>
    <url>%2F2019%2F04%2F22%2FHTML5%E5%A2%9E%E5%BC%BA%E7%9A%84%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0%2F</url>
    <content type="text"><![CDATA[课程概要 新增的 figure元素、 figcaption元素 新增的 details元素与 summary元素 新增的 mark元素 新增的 progress元素 新增的 meter元素 改良的 ol列表 改良的 dl列表 加以严格限制的 cite元素 和重新定义的 small元素 figure元素 以及 figcaption元素figure元素figure元素是一种组合元素，带有可选标题，figure元素用来表示网页上的一块独立的内容，将其从网页上移除之后，不会对网页的其他内容产生影响，figure元素 所表示的内容可以是图片、统计图或者是代码示例等 figcaption元素表示 figure元素 的标题，它从属于 figure元素 必须书写在 figure元素 的内部，可以书写在 figure 元素内部以及其他元素的前面或者后面，一个 figure元素 最多只允许放置一个 figcaption元素 ，但是允许放置多个其他元素 123456 美女 details元素 和 summary元素details元素details元素 是一种用于标识该元素内部的子元素可以被展开、收缩、显示的元素。 该元素具有一个 布尔类型 的 open属性，该属性值为 true 时，该元素内部的子元素应该被展开显示，当该属性为 false 的时候，其内部的子元素应该被收缩起来，不显示的。 该属性默认值是 false，页面打开时，其内部属于收缩状态。另外，details元素 内部不仅限于放置文字，还可以放置表单、插件或者是一个统计图的详细数据 summary元素summary元素 从属于 details元素，用鼠标单击 summary元素 中的文字内容时，details元素中的所有从属元素应该会被展开或者收缩，如果 details元素 没有 summary元素 ，浏览器会提供默认文字以供单击 123456789101112131415 function detail_onclick(detail){ var p = document.getElementById("p"); if(detail.open){ p.style.visibility = "hidden"; }else{ p.stule.visibility = "visible"; } } 速度与激情7 你好么，这是为保罗特意打造的电影，看起来激情四射 eg: mark元素mark元素 表示页面中需要突出显示或高亮显示的对于当前用户具有参考作用的一段文字 1这是一段文字，用来测试mark元素 eg: ol HTML5 中,将 ol 进行了改良，为它添加了 start属性 与 reversed属性 start属性如果我们希望它不是在 1 开始， 而是在 5 开始，就可以使用 start属性 1234567 列表1 列表2 列表3 列表4 列表5 reversed属性使用 reversed 倒叙列表 1234567 列表1 列表2 列表3 列表4 列表5 dl在 HTML5 中，将该元素进行重新定义，重新定义后的 dl列表 表示 多个名字的列表项，每一项都包含一条或多条带有名字的 dt元素，用来表示术语， dt 元素仅跟着一个或多个 dd 元素，在一个元素内不允许有相同名字的 dt 元素，不允许有重复的术语 123456 Hello 你好就是Hello 博客 你喜欢看博客吗 cite元素表示作品的标题，例如一本书，一篇文章或者一首歌曲等的一个标题，该作品可以在页面单中被详细引用，也可以只在页面中提一下 12cite元素我最喜欢的电影是速度与激情 small元素在HTML5中，对small元素进行了重新的定义，使其从原来的通用展示性元素变为具体的专门用来标识所谓小字印刷体的一个元素； 通常在运用到免费声明，注意事项，法律规范或者版权等相关的法律文字的内容中，同时不允许应用在页面主题内容中，只允许当作额外的信息以依赖的方式内嵌在页面中使用。 注意： small元素 并不意味元素中内容字号会改变，如果想改变字号，还是得使用CSS样式进行配合来实现的 progress元素代表任务的完成进度，这个进度可以是不确定的，表示进度正在执行或者不清楚当前工作量有没有完成，也可以使用从0到某个数字，比如：从0到100中的一个数字来表示当前的完成进度情况； 这个元素表示当前任务完成具体情况的一个属性，max属性完成代表当前的工作量，它有一个最大值和最小值，分别用来规定一个范围，比如从0到100，那么最小值是0，最大值是100； 也可能工作比较繁重，那么可以从 0 到 1000，他的比例会相应的增加 javascript:1234567891011121314151617181920212223//没有达到想要的效果是，当前 js 是一个单线程，它是要执行完整个的 for循环，然后再执行内容function btn(){ //按钮事件 //for(var i = 0,i]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bootstrap简介]]></title>
    <url>%2F2019%2F04%2F21%2FBootstrap%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[Bootstrap介绍 Bootstrap 是最受欢迎的 HTML 、CSS 、JS 的框架，用于开发响应式布局，移动设备优先的Web项目 Bootstrap 是为所有开发者，所有应用场景而设计的， Bootstrap 的前端是让开发更加快速，简单。所有的开发者都能快速上手、所有的功能都能适配、所有的项目都适用 三个优点 预处理脚本： 虽然我们可以直接使用 Bootstrap 提供的 CSS 样式表，但是 Bootstrap 的源码是基于最流行的 CSS 预处理脚本 Less 和Sass，你可以采用预编译的 CSS 文件快速开发，也可以从源码中定制自己需要的样式 响应式布局： 一个框架，多种设备；那么这对于我们现在来说无疑是最需要的点，我们希望我们的网页可以在电脑上展示，在平板上展示，在手机端展示，那么希望他们展示的内容都是相通的内容，那么这个时候，响应式布局给我们提供了很多的方便 特性齐全： Bootstrap提供了全面，美观的文档，你能在这里找到相应的 HTML 元素，HTLM 和 CSS 组件，以及 jQuery 插件方面的所有详细文档 注意： Bootstrap 是完全开源的，它的代码托管、开发、维护都依赖于Github 想要快速开发，使用Bootstrap是一个非常好的开源项目 Bootstrap的学习步骤 起步 全局的CSS样式 组件 JavaScript插件 定制 起步官网提供的几种下载方法生产环境的Bootstrap 使用这种方式下载的只是我们要使用的Bootstrap的几个文件，包含它的 CSS、 JS 以及字体文件（不包含文档和源码） eg: Bootstrap的源码 它包含 less 、 JavaScript 和 字体文件的源码，而且还带有文档 eg: SassBootstrap 从 less 到 Sass 的一个代码迁移移植项目，用于快速的来进行开发或者正对于 Sass 项目的引入等 下载选择 一般来说我们希望看到源码，所以下载第二个（Bootstrap源码）即可 如果我们只是单纯的使用，而且我们使用步骤也比较明确，那我们可以直接下载第一种 如果我们不想去下载，也可以直接使用 Bootstrap 给我们提供的一些 CDN 的加速服务 在下载完成后的 js 文件夹中发现，存在有两个文件 Bootstrap.js （未压缩）与 Bootstrap.min.js（压缩版本） 文件 注意： Bootstrap 是依赖于 jQuery 的，我们需要先引入一个 jQuery包 ，再来引入 Bootstrap包 基本的模板和案例eg： 如果我们觉得当前网站全是英文不是特别好理解，我们可以 Bootstrap 对应的中文网站： Bootstrap的中文网站]]></content>
      <categories>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js第二课]]></title>
    <url>%2F2019%2F04%2F21%2FVue-js%E7%AC%AC%E4%BA%8C%E8%AF%BE%2F</url>
    <content type="text"><![CDATA[知识点梳理 过滤器 键盘修饰符以及自定义键盘修饰符 自定义指令 vue实例的生命周期 vue-resource 实现 get、 post、 jsonp 请求 Vue中的动画 数组的新方法forEach、 somw 、 filter 、 findIndex、 这些都是数组的新方法，都会对数组中的每一项进行遍历，执行相关操作 不同之处 forEach： 无法被中止 some： 可以通过 return true 中止 filter： 进行过滤，把符合条件的，返回得到一个新数组 findIndex： 找到对应对象的索引 过滤器概念 Vue.js 允许你自定义过滤器，可以用作一些常见的文本格式化 。 过滤器可以用在两个地方： mustache插值 v-bind表达式 过滤器应该被添加在JavaScript表达式的尾部， 由“管道”符指示; 定义一个过滤器概念过滤器 调用 时候的格式1{{ name | 过滤器的名称 }} 代表我们在输出 name 的值之前，先 调用函数 进行一下处理，并把处理的结果当作 内容 渲染到 插值表达式 中 12//过滤器的定义语法Vue.filter('过滤器的名称',function(){}) 过滤器中的 function： 第一个参数已经被规定死了，永远都是过滤器管道符前面传递过来的数据 eg: 当输出 name，调用过滤器，就自动加入了 123 的后缀 123Vue.filter('name',function(data){return data + '123'}) 过滤器的基本使用过滤器本身就是用来做 输出前 最后一层的处理，没有修改 原数据 123456789101112131415161718192021222324252627282930313233 {{ msg | msgFormat('疯狂','123') | test }} //定义一个 Vue 全局的过滤器，名字叫 msgFormat //第一个参数可以拿到管道值， 第二个位置可以进行传参 //也可以传递多个参数 Vue.filter('msgFormat',function(msg,arg,arg2){ //字符串的replace 方法，第一个参数，除了可写一个字符串之外， 还可以定义一个正则 //【 /单纯/g 】 表示全局匹配 return msg.replace(/单纯/g,arg + arg2) }) //可以多次调用过滤器，先将 原始的值 交个第一个过滤器处 //理，再调用 第二个过滤器 对第一个过滤器处理的值进行处 //理，最后把结果放回 插值表达式 Vue.filter('test',function(msg)){ return msg + '========' } //Vue实例 var vm=new Vue({ el: '#app', data: { msg: '曾经，我也是一个单纯的少年，单纯的我，傻傻地问，谁是世界上最单纯的男人' }, methods: { } }); 处理过程： 对象先交给过滤器处理，过滤器调用函数，最后返回给 插值表达式 使用 SE6 中的字符串新方法 String.prototype.padStart( maxLength, fillString=’ ‘)或 String.prototype.padEnd(maxLength,fillString=’ ‘)来填充数字 按键修饰符当用户敲击键盘的按键时，触发相关事件。 eg: 1 系统给我们提供了一些按键别名： 自定义指令以及钩子函数通过 Vue.directive() 来定义，参数1 是指令的名称，参数2 是指令的对象 123456Vue.directive('focus',{ //当绑定的元素插入到 DOM 中会执行 inserted 这个函数 inserted: function (el) { el.focus() }}) 其他的函数： 下面实例中演示了前三个主要的方法 。 如果一个文本框，或者键盘上的一个超链接等等，当你想要显示，必须经过一个步骤， 浏览器的渲染会先解析这个元素，把解析好的元素先放在内存中的 DOM树 中，才能显示； 所以，如果没有放到 DOM树上，势必也无法获得焦点 钩子函数的参数 el： 指定所绑定的元素，可以用来操作 DOM binding： 一个对象，包含以下属性： name：指令名，不包括 v- 前缀 value：指令的绑定值（计算之后），例如： v-my-directive=”1 + 1”,value的值是2 oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中课用，无论值是否改变都可用。 expression：绑定值的字符串形式，例如： v-my-directive=”1 + 1”，expression的值是 “1 + 1” arg：传给指令的参数。例如： v-my-directive: foo, arg的值是 “foo” modifiers：一个包含修饰符的对象，例如： v-my-directive.foo.bar，修饰符对象 modifiers的值是（foo:true , bar:true） vnode：Vue编译生成的虚拟节点 oldVnode：上一个虚拟节点，仅在 update 和 comonentUpdated 钩子中可用 函数简写大多数情况下，我们可能想在 bind 和 update 钩子上做重复动作，并且不想关心其他的钩子函数。可以这样简写： 123Vue.directive('color-swatch',function(el, binding)){ el.style.backgroundColor = binding.value} Vue实例的生命周期什么是生命周期从 Vue实例的创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！ 生命周期钩子= 生命周期事件 = 生命周期函数 主要生命周期函数分类：创建期间的生命周期函数： beforeCreate： 实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods属性 这是我们遇到的第一个生命周期函数，表示实例完全被创建出来之前，会执行它 123 123456789101112131415var vm = new Vue({ el: '#app', data: { msg: 'ok' }, methods: { show(){ console.log('执行了show方法') } }, beforeCreate(){ //console.log(this.msg) //this.show() }}) 结论： 在beforeCreate 生命周期执行的时候，data 和 methods 中的数据都还没有被初始化 created： 实例已经在内存中创建 OK，此时 data 和 methods 已经创建 OK，此时还没有开始编译模板 123 123456789101112131415var vm = new Vue({ el: '#app', data: { msg: 'ok' }, methods: { show(){ console.log('执行了show方法') } }, created(){ console.log(this.msg) this.show() }}) 结论： 在 created 中，data 和 methods 都已经被初始化好了； 如果要调用 methods 中的方法，或者操作 data 中的数据，最早只能在 created 中操作 开始编译模板： 接下来表示开始编译模板，把Vue代码中的那些指令进行执行，最终在内存中生成一个编译好的最终模板字符串，然后把这个模板字符串，渲染为内存中的 DOM，此时只是在内存中渲染好了模板，并没有把模板挂载到页面中去 挂载 ： 放到页面的操作 beforeMount： 此函数执行的时候，模板已经在内存中编译好了，但是尚未挂载到页面中去，此时，页面还是旧的 这时遇到的第三个生命周期函数，表示 模板已经在内存中编译完成了，但是尚未把 模板 渲染到页面中去 123 {{ msg }} 1234567891011121314var vm = new Vue({ el: '#app', data: { msg: 'ok' }, methods: { show(){ console.log('执行了show方法') } }, beforeMount(){ console.log(document.getElementById('h3').innerText) }}) 在 beforeMount 执行的时候，页面中的元素，还没有真正替换过来，知识之前写的一些模板字符串（将要挂载） mounted ： 此时，已经将编译好的模板，挂载到了页面指定的容器中显示 如果要通过某些插件操作页面上的 DOM 节点，最早要在 mounted 中进行 只要执行完了 mounted，就表示整个 Vue 实例初始化完毕了，此时，组件以及脱离了 创建阶段，进入到了运行阶段 这是遇到的第四个生命周期函数，表示，内存中的模板已经真是的挂载到了页面中，用户已经可以看到渲染好的页面了 123 {{ msg }} 1234567891011121314var vm = new Vue({ el: '#app', data: { msg: 'ok' }, methods: { show(){ console.log('执行了show方法') } }, mounted(){ console.log(document.getElementById('h3').innerText) }}) 注意： mounted 是 实例创建期间最后一个生命周期函数，当执行完 mounted 就表示，实例已经被完全创建好了，此时，如果没有其他操作的话，这个实例，就静静的 躺着我们的内存中，一动不动 运行期间的生命周期函数 这些是组件 运行阶段 的生命周期函数，只有两个： beforUpdate 和 updated 这俩时间会根据 data 数据的改变，有选择性的触发0次 到 多次 beforeUpdate： 状态改变之前执行此函数，此时 data 中的状态值是最新的，但是界面上显示的数据还是旧的，因为此时还没有开始重新渲染 DOM节点 这时候表示我们的界面还没有被更新， 【 数据被更新了吗? 数据肯定被更新了 】 1234 {{ msg }} 123456789101112131415var vm = new Vue({ el: '#app', data: { msg: 'ok' }, methods: { show(){ console.log('执行了show方法') } }, beforUpdate(){ console.log('界面上元素内容：' + document.getElementById('h3').innerText) console.log('data 中的 msg 数据是：' + this.msg) }}) 得出结论： 当执行 beforUpdate 的时候， 页面中显示的数据还是旧的，此时 data 数据是最新的，页面尚未和最新的数据保存同步 updated： 实例更新完毕之后调用此函数，此时 data 中的状态值和界面上显示的数据都已经完成了更新，界面已经重新渲染好了！ 这一步执行的是： 先根据 data 中最新的数据，在内存中重新渲染出一份最新的 内存DOM数 当最新的 内存 DOM数 被更新之后，会把最新的内存 DOM数，重新渲染到页面中去，这时候，就完成了数据 从 data（Modelc层） -> view（视图层）的更新 1234 {{ msg }} 123456789101112131415var vm = new Vue({ el: '#app', data: { msg: 'ok' }, methods: { show(){ console.log('执行了show方法') } }, updated(){ console.log('界面上元素内容：' + document.getElementById('h3').innerText) console.log('data 中的 msg 数据是：' + this.msg) }}) 结论 ： updated 事件执行的时候，页面和 data 数据已经保持同步了，都是最新的 销毁期间的生命周期函数 beforeDestroy ： 实例销毁之前调用，在这一步，实例仍然完全可用 当执行 beforeDestory 钩子函数的时候，Vue实例 就已经 从 运行阶段，进入到了销毁阶段；当执行 beforeDestory 的时候，实例身上所有的 data 和所有的 methods，以及过滤器，指令 等等，都处于可用状态。 此时，还没有真正执行销毁的过程 destroyed： Vue实例销毁后调用。 调用后， Vue实例指示所有东西都会解绑、所有的事务监听器都会被移除，所有的之实例也会被销毁 当执行到 destroyed 函数 的时候，组件以及被完全销毁了，此时，组件中所有的数据、 方法、 指令、 过滤器…，都已经不可用了 案例：品牌管理案例 Vue不提倡操作 DOM jQuery帮我们封装了一些 DOM操作，它是用来操作 DOM 的； 而Vue是帮我们免除操作 DOM 的这个过程，所以 Vue 中一般不使用 jQuery 在 Vue 中，使用事件绑定机制，为元素指定处理函数的时候，如果加了小括号，就可以给函数传参了 HTML:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071//此案例需要引入 bootstrap 框架 添加品牌 Id: Name: 搜索名称关键字： //Vue中所有的指令，在调用的时候，都以 v- 开头 //注意：有无单引号的区别，如果不写 单引号，则表示为一个变量，它就会去 data 上面 //去找； 添加了 单引号 ，则表示为 一个字符串 //注意： 如果值为数字，则不会被当做一个变量，只会被当做一个字符串，直接被指令调用 Id Name Ctime Operation //之前， v-for 中的数据都是直接从 data 上的list中直接渲染过来的 //现在，我们自定义了一个 search方法，同时，把所有的关键字，通过 //传参的形式，传递给了 search 方法 //在 search 方法内部，通过执行 for循环，把所有符合关键字的数据，保存 //到一个新数组中，返回 {{ item.id }} {{ item.ctime | dataFormat('')}} //要阻止 a标签 的默认行为并且定义一个方法 删除 {{ dt | dateFormat }} JavaScript:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233//定义全局过滤器，进行时间的格式化//所谓的全局过滤器，就是所有的VM实例都共享的Vue.filter('dataFormat',function(dataStr,pattern=''){ //这是根据给定的时间字符串，得到特定的时间 var dt = new Date(dataStr) // yyyy-mm-dd var y = dt.getFullYear() var m = dt.getMonth() + 1 var d = dt.getDate() //retrun y + '-' + m + '-' + d //模板字符串 //return `${y} - ${m} - ${d}` //如果你传过来的 pattern 经过转换 第一个 判断条件 则返回年月日 //如果不成立，就认为要得到一个最全的日期 if(pattern.toLowerCase() === ’yyyy-mm-dd‘){ return `${y} - ${m} - ${d}` }else{ var hh = dt.getHours() var mm = dt.getMinutes() var ss = dt.getSeconds() return `${y} - ${m} - ${hh} ${hh}:${mm}:${ss}` }})//自定义全局按键修饰符Vue.config.keyCodes.f2 = 113//全局的指令不带 s，私有指令才带 s//使用 Vue.directive() 定义全局指令 v-focus//注意：在定义的时候，指令的名称前面，不需要加 v- 前缀，但是，在调用的时候，//必须在指令名称前 加上 v- 前缀来进行调用//参数1： 指令的名称 //参数2：是一个对象，这个对象身上有一些指令相关的函数，这些函数可以在特定的阶段，执行相关的操作Vue.directive('focus',{ //这里的 el 表示，把指令绑定到那个元素之上，这个el就表示哪个元素 //每当指令绑定到元素上的时候，会立即执行这个 bind函数，只执行一次 bind: function(el){ //注意：在每个函数中，第一个参数永远是 el，表示被绑定了指令的哪个元素， //这个 el 参数，是一个原生的 JS 对象（DOM对象） //在元素绑定了指令的时候，还没有 插入到 DOM中 去，这时调用 focus 方法没有作用 //因为，一个元素只有插入 DOM 之后，才能获得焦点 //绑定的时候执行了一次，所以插入后就没有执行，所以没有效果 //el.focus() //和JS行为有关的操作，最好在 inserted 中去执行，防止 JS行为不生效 }, //表示元素插入到 DOM 中的时候会执行 inserted 函数，只触发一次 //这是个 JS 行为，只有加载到 DOM 中，才能获得焦点，在内存中获得 //焦点没有意义； 就算是获得了焦点，最后也要重新从内存里面放到 DOM //中去； //放进 DOM 的时候要创建一下元素，放的时候，就不会再执行一次 focus() inserted: function(el){ el.focus() }, //当VNode更新的时候，会执行updated，可能会触发多次 updated: function(){ }})//自定义一个 设置字体颜色的 指令//只要把样式交给了 DOM元素，只要 DOM元素 被浏览器的渲染引擎解析，自然//也就会解析身上的样式，只要样式被解析了，最终显示到页面上，自然会把样//应用起来Vue.directive('color',{ //样式，只要通过指令绑定给了元素，不管这个元素有没有被插入到页面中去 //这个元素肯定有了一个内联的样式 //将来元素肯定会显示到页面中，这时候，浏览器的渲染引擎必然会解析样式， //应用给这个元素 bind: function(el,binding){ //el.style.color = 'red' //console.log(binding.name) //和样式相关的操作，一般都可以在 bind 中执行 //console.log(binding.value) //console.log(binding.expression) //带引号 el.style.color = binding.value }})//Vue实例var vm=new Vue({ el: '#app', data: { id: '', name: '', keywords: '',//搜索的关键字 list: [ {id: 1,name: '奔驰',ctime: new Date()}, {id: 2,name: '宝马',ctime: new Date()} ] }, methods: { add(){//添加的方法 //console.log('ok'); //分析步骤： //1.要获取 id 和 name ，直接从 data 上面获取 //2.组织出一个对象 //3.把这个对象，调用 数组的相关方法，添加到当前 data 上的 list中 //4.注意：在Vue中，已经实现了数据的双向数据绑定，每当我们修改了data中的数据，Vue会默认监听到数据的改动，自动把最新的数据应用到页面上； //5.当我们意识到上面的第四步的时候，就证明大家已经入门Vue了，我们更多的是在进行 VM 中 Model 数据的操作， 同时，在操作 Model 数据的时候，指定的业务逻辑操作； var car = { id: this.id, name: this.name, ctime: new Date()} this.list.push(car) //等号从右到左进行计算，依次赋值 this.id = this.name = '' }, del(id){ //根据id删除数据 //分析 //1.如何根据 Id, 找到要删除这一项的索引 //2.如果找到索引了，直接调用 数组的 splice方法 /* this.list.some((itme, i)=>{ if(item.id == id){ this.list.splice(i,1) //在数组的 some 方法中，如果 return true，就会立即终止这个数组的循环 return trun; } }) */ //另一种方法 var index = this.list.findIndex(item => { if(item.id == id){ return true; } }) this.list.splice(index, 1) }, search(keywords){//根据关键字，进行数据的搜索 /* var newList=[] this.list.forEach(item => { //判断是否包含关键字 if(item.name.indexOf(keywords) !=-1){ newList.push(item) } }) return newlist */ //注意： forEach、 somw 、 filter 、 findIndex、 这些都是 //数组的新方法，都会对数组中的每一项进行遍历，执行相关操作 return newList = this.list.filter(item => { //方法一：if(item.name.indexOf(keywords) != -1) //注意： SE6中，为字符串提供了一个新方法， //叫做 String.prototype.include('要包含的字符串') //如果包含，返回true，否则返回false if(item.name.includes(keywords)){ return item } }) //return newList } }});//如何自定义一个私有的过滤器（局部）var vm2 = new Vue({ el: "#app2", data: { dt: new Date() }， methods: { }， filters: { //定义私有过滤器 过滤器有两个条件 【过滤器名称 和 处理函数】 //过滤器调用的时候，采用的是就近原则，如果私有过滤器和全局过滤器名称一致了， //这时以私有过滤器为优先 dateFormat: function(dateStr,pattern = ''){ var dt = new Date(dataStr) var y = dt.getFullYear() var m = (dt.getMonth() + 1).toString().padStart(2,'0') var d = dt.getDate().toString().padStart(2,'0') if(pattern.toLowerCase() === ’yyyy-mm-dd‘){ return `${y} - ${m} - ${d}` }else{ var hh = dt.getHours().toString().padStart(2,'0') var mm = dt.getMinutes().toString().padStart(2,'0') var ss = dt.getSeconds().toString().padStart(2,'0') return `${y} - ${m} - ${hh} ${hh}:${mm}:${ss} ~~~~~~~~` } } }, //带 s，因为私有的内部可以有多个指令 directives: { 'fontweight': { bind: function(el,binding){ el.style.fontWeight = binding.value } }, //注意，这个 function 等同于把代码写到了 bind 和 update 中去 'fontsize': function(el,binding){ el.style.fontSize = parseInt(binding.value) + 'px' } }});//Vue不提倡这么做//document.getElementById('search').focus() some()： 根据指定的条件进行判断，如果返回true some() 就会被终止 findIndex()： 专门用来查找索引 Vue 调试工具 vue-devtools 的安装步骤和使用方法一：直接在谷歌浏览器添加插件Vue.js devtools - 翻墙安装方式 （本人测试无法使用） 方法二：本地手动安装 首先在github下载 devtools源码 ，地址：vue-devtools 再根据这篇博客进行添加，地址：手动添加 vue-devtools 方法 注意： 要想使用该插件，必须使用未被压缩过的文件 Vue.js，如果使用压缩过的 Vue.min.js ，则浏览器控制台不会出现 Vue 这一标签栏 如果还是无法使用，查看扩展工具中是否有 【 允许访问文件网址 】 安装成功就会出现如下效果 Vue-resource 实现 get、post、jsonp请求 之前的学习中，如何发起数据请求？ 要么写原生，但是原生太麻烦。 后来接触到 jQuery，然后就无法自拔了 而在 Vue 中，不推荐使用 jQuery ，因为 jQuery 要操作 DOM，而 Vue 不提倡操作 DOM，所以不需要使用 jQuery 那么我们可以使用很多的其他第三方包，比如： vue-resource，这是一个和 Vue 高度集成的一个第三方包，它能够让我们很方便的发送数据请求，像 get、 post、 jsonp 除了 Vue-resource 之外，还可以使用 ‘ axics ‘ 第三方包实现数据的请求 常见的数据请求类型？ get、 post、 jsonp 测试的URL请求资源地址 get请求地址： http://www.liulongbin.top:3005/api/getnewslist post请求地址： https://api.apiopen.top/musicBroadcasting jsonp请求地址： http://suggest.taobao.com/sug?code=utf-8&q=商品关键字&callback=cb 注意： Vue-resource 依赖于 Vue，所以先后顺序要注意 Vue-resource 向 Vue 身上又挂载了一个属性： $http，通过它可以点出一些方法， eg：this.$http.get、 this.$http.post、 this.$http.jsonp 使用方法： 使用方式： get(url, [options]) 第一个是请求的url地址 第二个options是可选的参数 post(url, [body],[options]) 第一个是请求的url地址 第二个是 body，注意：这是要发送给服务器的数据对象， 要以对象形式来存在； 因为 post 要提交一个数据，而数据就放在包里面 第三个是一些选项 jsonp(url, [options])：参数与 get 差不多，不做详解 例子： this.$http.get(‘/someUrl’,[options]).then(successCallback,errrorCallback); 请求 ‘/someUrl’ 的url地址 通过 .then 来拿到服务器返回的数据 .then 中有两个参数，一个是成功的回调，一个是失败的回调 注意：成功的回调必须要传，后面的 失败回调 是可选的 get请求1234567 1234567891011121314var vm = new Vue({ el: '#app', data: { }, methods: { getInfo(){ //发起 get 请求 //当发起 get 请求之后，通过 .then 来设置成功的回调函数 this.$http.get('http://www.liulongbin.top:3005/api/getnewslist').then(function(result){ console.log(result) }) } }}); 可以看到： status：200 // 表示成功 statusText： “ok” //表示状态码的描述信息 url: //表示请求地址 那有没有 data？ 可以在图中找，如图所示： 使用例子测试能否返回 data属性： 1234567 1234567891011121314var vm = new Vue({ el: '#app', data: { }, methods: { getInfo(){ //发起 get 请求 //当发起 get 请求之后，通过 .then 来设置成功的回调函数 this.$http.get('http://www.liulongbin.top:3005/api/getnewslist').then(function(result){ console.log(result.data) }) } }}); 控制台弹出如下数据，获取 data 信息成功 测试获取 body 的信息： 可以看到，返回的信息几乎一致，但是通过观察 result返回的值： 注意： 可以看到，虽然data也可以使用，但是data的值是虚的，所以我们建议使用 body post请求1234567 123456789101112131415var vm = new Vue({ el: '#app', data: { }, methods: { postInfo(){//发起 post 请求 application/x-wwww-form-urlencoded //手动发起的 post请求，默认没有表单格式，所以有的服务器处理不了 //通过 post 方法的第三个参数，设置 {emulateJSON : true} 提交的内容类型 为 普通表单数据格式 this.$http.post('https://api.apiopen.top/musicBroadcasting',{},{emulateJSON : true}).then(result => { console.log(result.body) }) } }}); 接下来使 post 发送数据到服务器，由于手动发起的 post请求，默认没有表单格式，所以有的服务器处理不了，所以要添加一个选项 emulateJSON： 发送请求体 添加上选项后，再次测试： 现在就可以访问了 JSONP请求1234567 12345678910111213var vm = new Vue({ el: '#app', data: { }, methods: { jsonpInfo(){//发起 jsonp 请求 this.$http.jsonp('http://suggest.taobao.com/sug?code=utf-8&q=商品关键字&callback=cb',{}).then(result => { console.log(result.body) }) } }}); 注意： 其实 箭头函数 默认就是一个 匿名函数，回调 本身就是一个匿名函数 可以看到，控制台成功返回了信息 JSOP的原理 由于浏览器的安全限制，不允许 AJAX 访问 跨域的请求（协议不同、域名不同、端口号不同的数据接口），浏览器认为这种访问不安全 可以通过动态创建 script 标签的形式，把 script标签 的 src属性，指向数据接口的地址，因为 script 标签不存在跨域限制，这种数据获取方式，称作 JSONP（注意：根据 JSONP 实现的原理，知晓，JSONP只支持Get请求） 具体实现过程： 现在客户端定义一个回调方法，预定义对数据的操作 再把这个回调方法的名称，通过URL传参的信息，提交到服务器的数据接口 服务器数据接口组织好姚发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行 客户端拿到服务器返回的字符串之后。 当做Script脚本去解析执行，这样就能够拿到 JSONP 的数据了 比如说：后端服务器的接口运行在 3344 上，而前端网站可能运行在 80 端口，那么这时候如何 跨域访问？ 如何请求数据？ 这时候，前后端开发更多是采用 JSONP，因为端口不一样 JSPON原理：动态创建 script 标签，由于 script标签 不受跨域的限制，script标签 就是来请求脚本，它把一个 src 脚本请求过来，当做 js 去解析执行 实例：模拟手动实现JSONP服务器端代码使用 node 写，然后客户端也可以请求 node服务器 的 JSONP的地址 客户端JSONP页面 先创建一个 html页面，然后托管到服务器，由于我没有安装 Visual Studio Code ，所以我暂时先托管到本地的 IIS服务器 12345 function show(){ console.log('ok') } 由于只要我们的页面被展示出来，浏览器的内存中就有一个 show() 方法，接下来手动调用 show()查看： 然后再添加一个 script标签 用于请求服务器 1234567 function show(){ console.log('ok') } 可以看到 客户端的端口 与 请求的服务器的端口不同，存在跨域限制，但是，script标签 不受跨域限制，可以请求 由于当前没有 请求的服务器，所以我们 手动创建一个node服务器（需要先安装 node.js）： 首先创建一个文件夹存放服务器脚本 app.js（任意位置） 写一个 app.js作为服务器文件 123456789101112131415//导入 http 内置模块const http = require('http')//创建一个 http 服务器const server = http.createServer()//监听 http 服务器的 request 请求server.on('request',function(req, res){ // write your code here...})//指定端口号并启动服务器监听server.listen(3000, function(){ console.log('server listen at http://127.0.0.1:3000')}) 使用 cmd 执行服务器 接下来修改 服务器脚本 的内容，添加一个 判断条件：如果你的地址等于 getscript，那么我们就可以返回一个 js脚本，因为 客户端 本来就是要请求一个脚本去执行，所以服务器需要返回一个脚本，否则 返回 ‘404’ 那么怎么才算是一个合适的脚本？ 比如：方法的调用； 我们可以在 html看到，客户端要请求的是一个 js文件 ，那么 服务器 就可以监听它的请求，给它返回一个 js文件 123456789101112131415161718192021222324252627//导入 http 内置模块const http = require('http')//创建一个 http 服务器const server = http.createServer()//监听 http 服务器的 request 请求server.on('request',function(req, res){ const url = req.url if(url === '/getscript'){ //拼接一个合法的 JS 脚本，这里拼接的是一个方法的调用 var scriptStr = 'show()' //通过 res.end() 发送给客户端，客户端 去把这个 字符串 当作 **JS代码**去解析执行 res.end(scriptStr) } else { res.end('404') }})//指定端口号并启动服务器监听server.listen(3000, function(){ console.log('server listen at http://127.0.0.1:3000')}) 接下来启动服务器，尝试使用 客户端 请求服务器的 JS脚本。 在 cmd 中启动 node服务器： 启动服务器后，在 IIS 服务器中启动 80端口 的html文件，打开控制台，可以看到，服务器成功调用并且输出了 show() 方法： 优化服务器动态调用方法功能由于 show() 方法的方法名称 写死 了，那服务器只能使用这一个方法。 在需求中，需要服务器可以 自动识别 调用的函数，所以最好就是 客户端 把方法的名称通通过 callback 来传递，服务器 拿到方法后就可以 动态拼接该方法，这样能保证方法的适用性 eg：修改HTML方法名字测试 1234567 function showInfo(){ console.log('ok') } 修改服务器代码 12345678910111213141516171819202122232425262728293031323334353637//导入 http 内置模块const http = require('http')//这个核心模块，能够帮我们解析 URL 地址，从而拿到 pathname queryconst urlModule = require('url')//创建一个 http 服务器const server = http.createServer()//监听 http 服务器的 request 请求server.on('request',function(req, res){ //const url = req.url //结构赋值 //true表示模块内部的方法，会调用另一个模块去帮我们解析成一个对象 const { pathname: url, query } = urlModule.parse(req.url, true) if(url === '/getscript'){ //拼接一个合法的 JS 脚本，这里拼接的是一个方法的调用 //var scriptStr = 'show()' //这里使用模板字符串动态调用方法 var scriptStr = `${query.callback}()` //通过 res.end() 发送给客户端，客户端 去把这个 字符串 当作 **JS代码**去解析执行 res.end(scriptStr) } else { res.end('404') }})//指定端口号并启动服务器监听server.listen(3000, function(){ console.log('server listen at http://127.0.0.1:3000')}) 接下来将 客户端的 showInfo()方法 改名字，改为showInfo123测试 服务器是否能够调用 该方法： 1234567 function showInfo123(){ console.log('ok') } 可以看到，服务器正常调用并返回到客户端 服务器修改客户端方法现在服务器端返回的脚本会执行本地定义的一些方法，服务器端只是简单地调用了一下方法； 那么服务器在调用方法的时候，能不能为方法传一个数据？ 可以，服务器为方法传递拼接好数据： 1234567 function showInfo(data){ console.log(data) } 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647//导入 http 内置模块const http = require('http')//这个核心模块，能够帮我们解析 URL 地址，从而拿到 pathname queryconst urlModule = require('url')//创建一个 http 服务器const server = http.createServer()//监听 http 服务器的 request 请求server.on('request',function(req, res){ //const url = req.url //结构赋值 //true表示模块内部的方法，会调用另一个模块去帮我们解析成一个对象 const { pathname: url, query } = urlModule.parse(req.url, true) if(url === '/getscript'){ //拼接一个合法的 JS 脚本，这里拼接的是一个方法的调用 //var scriptStr = 'show()' var data = { name: 'xjj', age: 18, gender: '女孩子' } //这里使用模板字符串动态调用方法 //把对象转成字符串，放到拼接的位置，这样的话，我们会调用这个方法，同时给传一个 JSON字符串类型的数据放到传递的数据中去 //相当于传递了 show()方法的一个参数，相同的道理 var scriptStr = `${query.callback}(${JSON.stringify(data)})` //通过 res.end() 发送给客户端，客户端 去把这个 字符串 当作 **JS代码**去解析执行 res.end(scriptStr) } else { res.end('404') }})//指定端口号并启动服务器监听server.listen(3000, function(){ console.log('server listen at http://127.0.0.1:3000')}) 可以看到，客户端拿到了服务器为方法拼接的对象，这就是 JSONP的实现原理 JSONP的实现原理：客户端自己不用调用，只有服务器返回一个具体方法的调用，如果我们需要拿到某个数据，服务器端就需要帮我们先把数据组织好，然后调用方法的时候传到 方法的参数就完成了]]></content>
      <categories>
        <category>Vue学习</category>
      </categories>
      <tags>
        <tag>前端知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[表单新增的元素与属性（五）]]></title>
    <url>%2F2019%2F04%2F20%2F%E8%A1%A8%E5%8D%95%E6%96%B0%E5%A2%9E%E7%9A%84%E5%85%83%E7%B4%A0%E4%B8%8E%E5%B1%9E%E6%80%A7%EF%BC%88%E4%BA%94%EF%BC%89%2F</url>
    <content type="text"><![CDATA[在HTML5中，大幅度的增加了与改良了input元素的种类，可以简单的使用元素来实现HTML5之前需要使用JavaScript脚本才能实现的许多功能 增加与改良的input元素 url类型、emali类型、date类型、time类型、datetime类型、datetime-local类型、month类型、week类型、number类型、range类型、search类型、Tel类型、color类型 url类型如果提交的不是一个网址，则会弹出提示请求输入网址,达到了一个检验的效果 1234 eg: email类型email的input元素是一种专门用来输入email地址的文本框，如果提交时该文本框的内容不是一个email地址的完整格式，则不允许进行提交，达到了一个检验的效果 1234 eg: date类型data类型的input元素是深受开发者喜爱的一种元素，在网页中经常需要输入各种各样的日期，例如生日，购买日期，订票等，那么data类型的input元素以日历的形式方便用户进行输入 1234 eg: time类型time类型的input元素，是一种专门用来输入时间的文本框，并且在提交时对输入时间有效性进行检查 1234 eg: datetime类型datetime类型是input元素一种专门用来输入UTC时间和日期的文本框，并且在提交时对输入的日期和时间进行有效性的检查； 它与time的区别就是，它是一个UTC的时间和日期 1234 datetime-local类型datetime-local它是input元素一种专门用来输入本地日期和时间的文本框，并且在提交时，对输入的日期和时间进行有效性的检查 1234 month元素month元素的input类型是一个专门用来输入月份的文本框，并且在提交时进行有效性的检查 1234 eg: week元素week类型的input元素是一种专门用来输入周号的一个文本框 1234 eg: number类型number类型的input元素是一种专门用来输入数字的文本框，并且在提交时进行检查，检查其中内容是否为数字，如果其中内容不为数字，则文本框内容作为空白来进行提交，也就意味着它也可以提交的，只不过提交的数据是空白，同时与输入日期时间的元素相通，number类型的input元素也具有一个最大值、最小值和一个step属性 1234 step属性意味着每次增加，是以指定的数字进行增加 eg: number类型的 valueAsNumbervalueAsNumber将文本框中的字符当做数字进行操作，而不是当成默认的字符串 制作简易计算器 1234567891011121314151617 function sum(){ var n1 = document.getElementById("num1").valueAsNumber; var n2 = document.getElementById("num2").valueAsNumber;; document.getElementById("result").valueAsNumber = n1 + n2 } + = range元素range类型的input元素是一种只允许输入一段范围的文本框，具有最大值和最小值属性，可以设置最大值、最小值， 默认值一般是0和100，也具有 step属性 step属性： 是一个每次增加的数值，可以指定每次拖动的步幅 12 eg: search类型它是一种专门用来输入搜索关键字文本框 12 tel类型tel类型的 input元素 被设计为用来输入电话号码的专用文本框，tel类型没有特殊的限制规则，不强制输入数字 12 color类型color类型的input元素被用来设计选取颜色，提供一个颜色选择器，现在它在黑莓浏览器、chrome20以上都是支持的 1234 eg: output元素的追加在HTML5中，追加了新的元素output元素，output元素定义不同类型的输出 12345678910 function value_change(){ var number= document.getElementById("range").value; document.getElementById("output").value= number; } 10 eg: 表单验证1234567891011121314151617 function check(){ var emial = document.getElementById("email"); if(email.value == ""){ alert("请输入email"); return false; }else if(!email.checkValidity()){ alert("请输入正确的Email地址"); return false; } } Email novalidates 表示不会对输入进行验证的表单 eg:]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue.js第一课]]></title>
    <url>%2F2019%2F04%2F19%2FVue-js%E7%AC%AC%E4%B8%80%E8%AF%BE%2F</url>
    <content type="text"><![CDATA[什么是Vue.js Vue.js是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App；Vue语法也是可以用于进行手机App开发的，需要借助于Weex） Vue.js是最前端主流框架之一，和Angular.js、React.js一起，并成为前端三大主流框架 Vue.js是一套构建用户界面的框架，值关注视图图层，它不仅易与上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发） 前端的主要工作？主要负责MVC中的V这一层，主要的工作就是和界面打交道 为什么要学习流行框架 企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱 提高开发效率的发展历程：原生JS（原生代码纯在兼容性） -> Jquery（屏蔽各个浏览器的兼容性） -> 前端模板引擎（不需要频繁操作DOM） -> Angular.js / Vue.js（减少不必要的DOM操作，提高渲染效率；提供了双向数据绑定概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心DOM是如何渲染的了】） 在Vue中，一个核心概念，就是让用户不再操作DOM元素，解放了程序员的双手，让程序员可以更多的时间去关注业务逻辑 在MVC中，C层（业务逻辑层）开发起来最麻烦，通常占了整个程序的70~80%的代码量，消耗主要的精力 争强自己就业时候的竞争力，人无我有，人有我优！！！ 框架和库的区别 框架：是一套完整的解决方案；对项目的侵入性较大；项目如果需要更换框架，则需要重新架构整个项目 库（插件）：提供某一个小功能，对项目入侵较小，如果某个库无法完成某些需求，可以很容易切换到其他库实现需求。例如： 从Jquery 切换到 Zepto 从 EJS 切换到 art-template Node（后端）中的MVC与前端中的MVVM的区别 MVC 是后端的分层开发概念（M【model】：处理数据、V【view】视图层、c【Controller】业务逻辑层） 数据的CRUD：增加(Create)、读取查询(Read)、更新(Update)和删除(Delete)几个单词的首字母简写。 MVVM是前端视图图层概念，主要关注于视图层分离，也就是说：MVVM把前端的视图层，分为了三部分： Model View VM ViewModel （MVVM思想的核心，因为VM是M和V之间的调度者） 前端页面中使用MVVM的思，主要是为了让我们开发更加方便，因为MVVM提供了数据的双向绑定； 注意：数据的双向绑定是由VM提供的 Vue.js 基本代码和MVVM之间的对应关系 Vue和其他框架一样，需要下载一个 .js 文件（这里使用vue- 2.4.0.js版本） 通过Vue提供的指令，很方便的就能把数据渲染到页面上，程序员不再手动操作DOM元素了【前端的Vue之类的框架，不提倡我们去手动操作DOM元素了】 当我们导入包之后，在浏览器的内存中，就多了一个 Vue 的构造函数 123456789101112131415161718192021222324//将来new的Vue实例，会控制这个元素中的所有内容//导入vue的包//创建一个Vue的实例 //我们new出来的这个 vm 对象，就是我们 MVVM 中的 VM 调度者 var vm = new Vue({ el: '#app', //表示当前new的这个Vue实例，要控制页面上的哪个区域 //这里的data激素MVVM中的 M，专门用来保存每个页面的数据 data: { //data属性中，存放的是el中要用到的数据 msg: '欢迎学习Vue' } })// Vue元素所控制的这个区域，就是我们的 V {{ msg }} Vue值 - 【基本的代码结构】 和 【插值表达式】、【v-cloak】当网速较慢时，请求数据网页就会出现原本的代码块，此时可以用 v-clock属性 来解决该问题 v-cloak：能够解决插值表达式的闪烁问题 1234567891011121314151617181920 {{ msg }} [v-clock]{ //属性选择器 display: none; } var vm = new Vue({ el: '#app', data: { msg: '123' } }) 调整网速进行测试：浏览器的调试界面 -> Network -> Online -> Slow 3G，表示慢速的一个3G网络 Vue指令之 【V-text】 和 【V-html】v-textV-text的作用和插值表达式是没有太大的区别的,那为什么还要有插值表达式和 V-text 呢？ 区别： v-test v-html V-test默认没有闪烁问题 插值表达式默认会出现闪烁问题: V-test会覆盖html标签中原本的内容 插值表达式可以在前后放置任意内容（不会覆盖） 12345678910111213 var vm = new Vue({ el: '#app', data: { msg: '123' } }) v-html 插值表达式和V-test都会把内容当中普通字符串输出,当我们将数据作为HTML语句输出时，我们就需要使用v-html来进行输出 12345678910111213 var vm = new Vue({ el: '#app', data: { msg2: '哈哈，我是一个大大的H1，我大，我骄傲' } }) V-bind绑定属性v-bind是Vue中，提供的用于绑定属性的指令。声明这是一个data变量，从而对参数进行解析 12345678910111213 var vm = new Vue({ el: '#app', data: { mytitle:'这是一个自己定义的title' } }) 注意：v-bind会把属性引号内的东西当做js代码去解析执行，即可以写合法的表达式，eg：可以使用 “ mytitle + ‘123’ “ 【变量+表达式】来作为参数 v-bind的简写v-bind可以被简写为只用“ : ”来表示，eg： V-on绑定事件Vue中提供了 【 v-on： 】 事件绑定机制 123456789101112131415161718 var vm = new Vue({ el: '#app', data: { }, methods:{ //这个methods属性中定义了当前Vue实例所有可用额方法 show:function(){ alert('Hello') } } }) 一般在js中，带 s 的关键字通常是一个数组 知识总结 如何定义一个基本的Vue代码结构 插值表达式 和 v-text v-cloak 解决插值表达式闪烁问题 v-html v-bind vue提供的属性绑定机制；缩写是【 ： 】 v-on vue提供的事件绑定机制；缩写是【 @ 】 实例：Vue指令之 ‘v-on’ 和 ‘跑马灯效果’ 点击“浪起来”：每隔一段时间都会第一个字符并放到最后；点击“低调”：停止截取 分析： 给 【浪起来】 按钮，绑定一个点击时间 v-on 或缩写 【 @ 】 在按钮的事件处理函数中，要写相关的业务逻辑代码：拿到 msg 字符串，然后调用字符串的 substring 来进行字符串的截取操作，把第一个字符截取出来，放到最后一个位置即可 为了实现点击一下按钮，自动截取的功能需要把2步骤中的代码，放到一个定时器中 在VM实例中，如果想要获取 data 身上的属性，或者调用 methods 里面的方法，必须通过 this.数据属性名 或 this.方法名 来进行访问，这里的this，就表示我们 new 出来的 VM实例对象 1234567891011121314151617181920212223242526272829303132333435363738 {{ msg }} var vm = new Vue({ el: '#app', data: { msg: '猥琐发育，别浪~~!', intervalId:null //在data上定义 定时器id，类似于全局变量，方便调用 } methods: { lang(){ //console.log(this.msg) //刚一开始定时器的值等于null，每当调用null，都会返回一个值给IntervalId，所以每次点击按钮，都会重复的开启定时器，所以需要一个条件来判断是否等于null，即是否第一次开启定时器，防止重复开启 if(this.intervalId != null) return; // => 表示内部的this指向外部的this this.intervalId = setInterval( () => { //获取到头的第一个字符 var start = this.msg.substring(0,1) //获取到后面的所有字符 var end = this.msg.substring(1) //表示从1开始截取，如果不写第二个参数，则截取剩余所有部分 //重新拼接得到新的字符串，并赋值给this.msg this.msg=end + start },400) }, stop(){ clearInterval(this.intervalId) //每当清楚了定时器之后，需要重新把 intervalId 置为null this.intervalId = null; } } }) 箭头函数 【 => 】 的作用：解决了this指向的问题，箭头函数内部的this永远和箭头函数外部的this保持一致；我们外部的this当前的指向是我们的vm实例，所以内部的指向也是vm实例 Vue有一个特点，它能监听自己身上date的改变，只要date有改变，它会立即把改变应用到页面中去。【好处：程序员值需要关系数据，不需要考虑如何重新渲染到页面】 console.log()方法：表示用于在控制台输出信息 Vue指令之 v-on的缩写 和 时间修饰符v-on的缩写，即使用‘ @ ’符号v-on 提供的事件修饰符 .stop阻止冒泡 .prevent阻止默认事件 .capture添加事件监听器使用事件捕获模式 .self只当事件在元素本身（比如不是子元素）触发时触发回调 .once事件只触发一次 【 .stop 】 阻止冒泡机制冒泡机制：先调用当前元素事件，然后再调用外层被包裹的这些元素;使用了【 .stop 】 阻止冒泡机制，就不会自动调用外层事件，只会调用当前的事件 1234567891011121314151617181920212223242526272829303132 .inner{ height: 150px; background-color: darkcyan; } var vm=new Vue({ //指定了要控制的元素 el: "#app", //指定了要展示的数据 data: {}, //要触发的方法 methods:{ div1Handler(){ console.log('这是触发了 inner div 的点击事件') }, btnHandler(){ console.log('则是窜了 btn按钮 的点击事件') } } }); 【 .prevent 】 阻止默认行为eg：只要显示自己定义的事件，不实现默认事件(即阻止默认行为)。eg：超链接的默认跳转事件 123456789101112131415161718192021222324 有问题，先去百度 var vm=new Vue({ //指定了要控制的元素 el: "#app", //指定了要展示的数据 data: {}, //要触发的方法 methods:{ linkClick(){ concole.log('触发了链接的点击事件') } } }); 【 .capture 】 添加事件监听器时使用事件捕获机制使用 【 .capture 】 实现捕获触发事件的机制，即将捕获到的事件优先运行。eg：由于DOM是默认冒泡排序机制（从内到外），我们可以使用【 .capture 】捕获外层事件，实现从外到内进行程序的运行 123456789101112131415161718192021222324252627282930313233 .inner{ height: 150px; background-color: darkcyan; } //捕获 var vm=new Vue({ //指定了要控制的元素 el: "#app", //指定了要展示的数据 data: {}, //要触发的方法 methods:{ div1Handler(){ console.log('这是触发了 inner div 的点击事件') }, btnHandler(){ console.log('则是窜了 btn按钮 的点击事件') } } }); 【.self】事件，表示只有自身才能触发自身的事件使用【.self】实现只有点击当前元素的时候，才会触发事件处理函数 1234567891011121314151617181920212223242526272829303132 .inner{ height: 150px; background-color: darkcyan; } var vm=new Vue({ //指定了要控制的元素 el: "#app", //指定了要展示的数据 data: {}, //要触发的方法 methods:{ div1Handler(){ console.log('这是触发了 inner div 的点击事件') }, btnHandler(){ console.log('则是窜了 btn按钮 的点击事件') } } }); once事件只触发一次使用【.once】只触发一次事件处理函数，类似于使用了一次事件后就将事件舍弃 123456789101112131415161718192021222324 有问题，先去百度 var vm=new Vue({ //指定了要控制的元素 el: "#app", //指定了要展示的数据 data: {}, //要触发的方法 methods:{ linkClick(){ concole.log('触发了链接的点击事件') } } }); 注意： 【.stop】和【.self】的区别 【.stop】阻止了所有的 冒泡行为；【.self】只会阻止自身冒泡行为的触发，并不会真正阻止 冒泡的行为； Vue指令之 【v-model】 和 【双向数据绑定】使用v-model指令，可以实现 表单元素和Model中数据的双向绑定；注意：v-model只能运用在表单元素中 只有v-model才可以实现 【双向数据绑定】 v-bind只能实现数据的单向绑定，从 M 自动绑定到 V，无法实现数据的双向绑定 12345678910111213141516 {{ msg }} var vm=new Vue({ el: '#app', data: { msg: '大家都是好学生，爱敲代码，爱学习，爱思考，简直是完美，没瑕疵！' }, methods: {} }); 我们在date身上定义的属性或者字段，Vue会帮我们挂载到vm身上 实例：简易计算器案例 代码是从上带下去执行，先加载Vue.js包，再渲染HTML页面，然后立即执行Vue脚本语言，重新为HTML中的值赋值，最后赋值完成并且输出到HTML页面中 1234567891011121314151617181920212223242526272829303132333435363738394041424344 + - * / var vm = new Vue({ el: '#app', data: { n1: 0, n2: 0, result: 0, opt: '+' }; methods: { calc(){ switch(this.opt){ case '+': this.result = parseInt(this.n1) + parseInt(this.n2) break; case '-': this.result = parseInt(this.n1) - parseInt(this.n2) break; case '*': this.result = parseInt(this.n1) * parseInt(this.n2) break; case '/': this.result = parseInt(this.n1) / parseInt(this.n2) break; } } } }); 还可以使用如下代码代替 switch()函数： eval()函数：把字符串解析执行，然后获得执行的结果 123//投机取巧的方式，正式开发中尽量少用var codeStr = 'parseInt(this.n1)' + this.opt + 'parseInt(this.n2)'this.result=eval(codeStr) 在Vue中使用样式使用class样式 数组1这是一个邪恶的H1 注意：class使用 v-bind 做数据绑定时，类名必须用单引号包起来，vue的属性则不必加单引号 数组中使用三元样式1这是一个邪恶的H1 eg: 1234567891011121314 这是一个很大很大的H1，大到你无法想象！！！ var vm=new Vue({ el: '#app', data: { flag: false }, methods: {} }); 数组中嵌套对象 在数组中使用对象来代替三元表达式，提高代码的可读性 1这是一个邪恶的H1 eg: 1234567891011121314 这是一个很大很大的H1，大到你无法想象！！！ var vm=new Vue({ el: '#app', data: { flag: true }, methods: {} }); 直接使用对象 在为 class 使用 v-bind 绑定对象的时候，对象的属性是类名，由于对象的属性可带引号，也可不带引号，所以这里可写可不写； 属性的值是一个标识符 1这是一个邪恶的H1 eg: 1234567891011121314 var vm = new Vue({ el: "add", data: { flag: true, classObj: { red: true, thin: true, italic: false, active: false} }, methods: {} }) 使用内联样式 对象就是无序键值对的集合 直接在元素上通过 【:style】 的形式，书写样式对象1这是一个善良的H1 如果属性中有 ‘-‘ ，则必须添加一个单引号 将样式对象，定义到 【data】 中，并直接引用到 【:style】中在 data 上定义样式：123data: { h1StyleObj: {'color': 'red','font-size': '40px','font-weight': '200'}} 在元素中，通过属性绑定的形式，将样式的对象应用到元素中：1这是一个善良的H1 在 【:style】 中通过数组，引用多个 【data】 上的样式对象在data上定义样式：1234data: { h1StyleObj: {color: 'red','font-size': '40px','font-weight': '200'}, h1StyleObj2: {fontStyle: 'italic'}} 在元素中，通过属性绑定的样式，将样式对象应用到元素中：1这是一个善良的H1 Vue指令之 【v-for】 和 【key】 属性迭代数组v-for循环普通数组12345678910111213 索引值：{{i}} --- 每一项： {{item}} var vm= new Vue({ el: '#app', data: { list: {1,2,3,4,5,6} }, methods: {} }); v-for循环对象数组1234567891011121314151617 Id: {{ user.id }} === 名字： {{ user.name }} --- 索引：{{ i }} var vm= new Vue({ el: '#app', data: { list: { id:1, name: 'zs1'}, list: { id:2, name: 'zs2'}, list: { id:3, name: 'zs3'}, list: { id:4, name: 'zs4'} }, methods: {} }); 迭代对象中的属性在遍历对象身上的键值对的时候，除了有 val key之外 ，在第三个位置还有一个索引 1234567891011121314151617 值是： {{ val }} --- 键是： {{ key }} --- 索引： {{ i }} var vm = new Vue({ el: "#app", data: { uesr: { id: 1, name: '托尼·斯达克', gender: '男' } }, methods: {} }) 迭代数字in 后面我们放 普通数组， 对象数组， 对象， 还可以放数字 1234567891011121314 这是第 {{count}} 个p标签 var vm=new Vue({ el: "#app", data: { }, methods: {} }) 如果使用用 v-for 去迭代一个数字的话，则起始位置从1开始 2.2.0+ 的版本里，单在组件中使用 v-for 时，key现在是必须的当Vue.js用 v-for 正在更新已渲染过的元素列表时，它默认用“就地复用”策略，如果数据项的顺序被改变，Vue将不是移动DOM元素来匹配数据项的顺序，而是简单复用此处每个元素，而且确保它在特定索引下显示已被渲染过得每个元素。 为了给Vue一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有的元素，你需要为每项提供一个唯一key属性。 在组件中，使用 v-for 循环的时候，或者在一些特殊情况中，如果 v-for 有问题，必须在使用 v-for 的同时，指定唯一的字符串/数字类型： key值 注意：没有使用key时，表示没有指定选中为哪一项，会导致bug；每次for循环的时候，通过制定key来标识当前循环这一项的一个唯一身份 12345678910111213141516171819202122232425262728293031323334353637383940414243 Id: Name: //注意：v-for循环的时候，key 属性只能使用 number 或 string //注意： key 在使用时，必须使用v-bind属性绑定的形式，指定key的值 {{item.id}} --- {{item.name}} var vm = new Vue({ el: "#app", data: { id: '', name: '', list: { {id: 1, name: '李斯'}, {id: 2, name: '嬴政'}, {id: 3, name: '赵高'}, {id: 4, name: '韩非'}, {id: 5, name: '荀子'}, } }, methods: { add(){ this.list.unshift({id: this.id, name: this.name }) } } }) key属性 能够保证数据的唯一性，让我们data上的数据与页面上的数据强制关联起来 ； 如果不使用key，程序则会值使用 v-for 来循环渲染，渲染结束后就会忘记各个DOM元素的对应关系，从而导致BUG eg: push():在数组末尾添加元素， unshift():在数组开始添加元素 Vue指令之 v-if 和 v-show一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换使用 v-show 较好，如果在运行时条件不大可能改变使用 v-if 较好 如果元素涉及到频繁的切换，最好不要使用 v-if ，而是推荐使用 v-show； 如果元素可能永远也不会被显示出来被用户看到，则推荐使用v-if v-if的特点： 每次都会重新删除或创建元素； v-show的特点： 每次不会重新进行DOM的删除和操作，知识切换了元素的 display： none 样式 v-if 有较高的切换性能消耗； v-show 有较高的初始渲染消耗 1234567891011121314151617181920 这是用v-if控制的元素 这是用v-show控制的元素 var vm=Vue({ el: "#app", data: { flag: true }, methods: { toggle(){ this.flag= !this.flag } } }); 知识梳理：MVC 和 MVVM 的区别MVC 是后台开发的概念，MVVM 为前端的概念。MVC站在整个项目的角度来考虑，MVVM只考虑前端页面，把前端页面分离为 Model 、 View 、 VM，其中，VM为核心，它是一个调度者，如果离开了VM，则MVVM将失去所有的优势。其中，vm提供了一个很重要的功能，即双向数据绑定 Vue基本代码的结构 导入包 创建一个要控制的元素（一般在 div标签 中加一个 id 以便控制） 变向Vue代码 注意： 不要给 body标签 加一个 id，在 Vue的版本1 里面是可以这么干的，但是在 Vue2.0 以后都不能这么写了 基本指令 插值表达式 v-cloak、 v-text、 v-html、 v-bind、 v-on、 v-model 、v-for、 v-if 、v-show； 其中： v-bind 的缩写是：【 : 】 v-on 的缩写是：【 @ 】 事件修饰符 【 .stop 】： 阻止冒泡 【 .prevent 】： 阻止默认行为 【 .capture 】： 捕获机制 【 .self 】： 自身执行 【 .once 】： 只执行一次 vm实例的属性 【 el 】： 指定要控制的区域 【 data 】： 是个对象，指定了控制的区域内要用到的数据 【 methods 】：虽然带了个 s 后缀，但是是个对象，这里可以自定义方法 学习注意事项 在vm实例中，如果要访问data上的数据，或者要访问methods中的方法，必须带this 在 v-for 中，要会使用 key 属性（只接受 string / number） v-model 只能应用于表单元素 在vue中绑定样式的两种方式 v-bind: class 、 v-bind: style v-if 有更高的切换消耗、 v-show 有更高的初始渲染消耗]]></content>
      <categories>
        <category>Vue学习</category>
      </categories>
      <tags>
        <tag>前端知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[表单新增的元素与属性（四）]]></title>
    <url>%2F2019%2F04%2F19%2F%E8%A1%A8%E5%8D%95%E6%96%B0%E5%A2%9E%E7%9A%84%E5%85%83%E7%B4%A0%E4%B8%8E%E5%B1%9E%E6%80%A7%EF%BC%88%E5%9B%9B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[文本框的list属性在HTML5中，为单行文本框增加了一个list属性，该属性的值为某个datalist元素的id。datalist元素也是HTML5中新增的元素，该元素类似于选择框，但是用户想要设定的值不在选项列表之内时，允许自行输入。datalist元素本身并不显示，而是当文本框获得焦点时以提示输入的方式显示。(类似于下拉菜单) 123456789 HTML5学习 Android学习 IOS学习 datalist属性默认是看不到的，但是为了在每个浏览器中兼容，所以还是自己设置style的display属性 eg: 文本框的autocomplete属性帮助输入所用的自动完成功能，是一个既节省输入时间有十分方便的功能，在HTML5之前，因为谁都可以看见输入的值，所以在安全方面存在缺陷，只要使用AutoComplete属性，安全性方面也可以得到很好地控制。 1234//方法同上，即使用datalist标签定义候补的值 autocomplete有两个值：on（不填写）、off 文本框的pattern属性在HTML5中，对input属性使用pattern属性，并且将属性值设为某个格式的正则表达式，在提交时会针对这些进行检查，检查其内容是否符合给定格式。当输入的内容不符合给定格式时，则不允许提交，同时在浏览器中显示提示文字，提示输入的内容必须符合给定格式。 123456 请输入内容 //该正则表达式表示随意输入3个大写字母 eg: 文本框的SelectionDirection属性这对input元素与textarea元素，在HTML5增加了SelectionDirection属性。当用户在这两个元素中用鼠标选取部分文字时，可以使用该属性来获取选取方向。当用户正向选取文字时，该属性值为“forward”，当用户反向选取文字时，该属性值为“backward”。当用户没有选取任何文字时，该属性值为“forward”。 12345678910111213 function AD(){ var control = document.forms[0]['text']; var Direction = control.selectionDirection; alert(Direction); } 一般我们会以SelectionDirection这种属性的方式来获取用户的操作然后从中获取需要的信息]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[表单新增的元素与属性（三）]]></title>
    <url>%2F2019%2F04%2F18%2F%E8%A1%A8%E5%8D%95%E6%96%B0%E5%A2%9E%E7%9A%84%E5%85%83%E7%B4%A0%E4%B8%8E%E5%B1%9E%E6%80%A7%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[标签的control属性在HTML5中，可以在标签内部放置一个表单元素，并且通过该标签的control属性来访问该表单元素 1234567891011121314151617 function setValue(){ var label = document.getElementById("label"); var textbox = label.control; textbox.value="010010"; } 邮箱： 请输入六为数字 文本框的placeholder属性placeholder是指当前文本框处于未输入状态时显示的输入提示。当文本框处于未输入状态且未获取光标焦点时，模糊显示输入提示文字 placeholder属性相当于文本框的提示，方便我们对当前的输入框当中的输入内容有更好的了解 12 eg: 复选框的indeterminate属性对于复选框checkbox元素来说，过去只是选取与非选取这两种状态。在HTML5中，可以在JavaScript脚本代码中对该元素使用indeterminate属性，以说明复选框处于“尚未明确是否选取状态”。 12345属性测试 var cb = document.getElementById("cb"); cb.indeterminate = true; eg : 注：该属性表明checkbox有三种状态。 注：这两个属性的配合使用，我们指的是interminate与checkbox属性两种不同的属性，如果只考虑interminate与checkbox结合使用，可能会被认为复选框具有两种false或者两种true、或者是一种true一种false、另外一个false另外一个true，即四种状态来组合。但事实上，他只有三种状态，即选取、非选择和不明状态，所以写的时候，需要在JavaScript脚本中进行简单的处理。 image提交按钮的height属性和width属性针对于类型为image的input属性，HTML5新增了两个属性，height、width分别用来指定图片按钮的高度和宽度。 12345 姓名 eg:]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP生成验证码]]></title>
    <url>%2F2019%2F04%2F18%2FPHP%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81%2F</url>
    <content type="text"><![CDATA[代码部分form.php文件 12345678910111213if (isset($_REQUEST['authcode'])) { session_start(); if (strtolower($_REQUEST['authcode'])==$_SESSION['authcode']) { echo' 输出正确'; # code... }else{ echo $_REQUEST['authcode']; echo $_SESSION['authcode']; echo' 输出错误'; } exit();} 本段代码的解析：先接受session值，将提交的值与验证码比较，如果输入正确，则显示‘输入正确’，否则依次输出提交的值、验证码的值和‘输入错误’ captcha.php文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051//必须至于顶部,多服务器端记录验证码信息，便于用户输入后做校验session_start();//默认返回的是黑色的照片$image = imagecreatetruecolor(100, 30);//将背景设置为白色的$bgcolor = imagecolorallocate($image, 255, 255, 255);//将白色铺满地图imagefill($image, 0, 0, $bgcolor);//空字符串，每循环一次，追加到字符串后面 $captch_code='';//验证码为随机四个数字母字for ($i=0; $i]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP相关知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[表单新增的元素与属性（二）]]></title>
    <url>%2F2019%2F04%2F17%2F%E8%A1%A8%E5%8D%95%E6%96%B0%E5%A2%9E%E7%9A%84%E5%85%83%E7%B4%A0%E4%B8%8E%E5%B1%9E%E6%80%A7%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[formtarget属性在HTML4中，表单元素具有一个target属性，该属性用于指定在何处打开表单提交后所需要加载的页面。 在HTML5中，可以对多个按钮分别使用formtarget属性来指定提交后在何处打开所需加载的页面。 123456789101112 提交到xx.jsp页面 提交到xx.jsp页面 提交到xx.jsp页面 提交到xx.jsp页面 提交到xx.jsp页面< /form>< /form> formtarget的五个属性 _blank：在新的浏览器页面或窗口进行打开 _self：target属性的默认值，在相同的框架frame中打开 _parent：在当前框架的父框架中进行打开 _top：在当前窗口中打开， _framename：在指定框架中打开 autofocus属性为文本框，选择框或按钮控件加上autofocus属性，当画面打开时，该控件自动获得光标焦点 12345 < /form> autofocus属性一般是用在当前页面，当前的输入框或者是按钮或者是其他的内容处于第一优先级时，才会使用该属性 required属性HTML5中新增的required属性可以应用在大多数输入元素上，在提交时，如果元素中内容为空白，则不允许提交，同时在浏览器中显示相应的提升文字 12345 提交< /button>< /form> eg: labels属性在HTML5中，为所有可使用标签的表单元素、button、select元素等，定义一个labels属性，属性值为一个NodeList对象，代表该元素所绑定的标签元素所构成的集合 12345678910111213141516171819202122 function Validate(){ var txtName=document.getElementById("txt_name"); var button=document.getElementById("btnValidate"); var form=document.getElementById("testform"); if(txtName.value.trim()=="" ){ var label=document.createElement("label"); label.setAttribute("for","txt_name"); form.insertBefore(label,button); txtName.labels[1].innerHTML="请输入姓名"; txtName.labels[1].setAttribute("style","font-size:9px;color:red"); } }< /script> 姓名：< /label> < /form> label的for属性：for属性规定label与那个表单元素绑定 trim()：去除字符串的头尾空格]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[环回接口（Loopback）]]></title>
    <url>%2F2019%2F04%2F16%2F%E7%8E%AF%E5%9B%9E%E6%8E%A5%E5%8F%A3%EF%BC%88Loopback%EF%BC%89%2F</url>
    <content type="text"><![CDATA[概述路由器上的一个逻辑、虚拟接口。路由器默认没有任何环回接口，但是它们很容易创建。可以根据需要创建任何数目的环回端口。这些接口在路由器上与物理接口一样对待；可以给他们分配寻址信息，包括他们在路由器选择更新中的网络号，甚至在它们上可以终止IP链接，如Telnet。环回接口由于独占一个IP地址，子网掩码一般建议设为255.255.255.255 loopbackloopback接口，在网络设备（一般是路由器）上是一种特殊的接口，它不是物理接口，而是一种看不见摸不着的逻辑接口（虚拟接口），但是对于网络设备来说是至关重要的。 在网络设备上可以通过配置命令来创建一个或多个环回接口，并且可以和配置物理接口一样，配置环回接口的IP地址和掩码，环回接口的掩码一般全为1，既255.255.255.0。环回接口有一个特性，除非设备瘫痪，否则其状态一直是up。这个特征对于路由协议来说非常重要。环回接口是使用广泛的一种逻辑接口。在一个网络中，不同设备的环回接口地址以及同一设备上的不同环回接口地址应该统一规划，避免重复。 创建环回接口的原因 用来建立路由邻居 我们知道路由协议想要正常运行，大多数需要先建立邻居关系，邻居关系的稳定是路由计算正确的基石。实际运用中，常常使用环回接口来建立两个路由器之间的邻居关系。比起使用物理接口建立连接，使用环回接口可以使邻居关系更加牢固，因为就算某刻物理链路和接口发生了故障，只要能从其他途径访问到该设备，那么邻居关系就不会中断。 用来作为Router-ID 在常用的OSPF，BGP登录有协议中，都有Router-ID的概念，这相当与一台路由器的身份证号，在一个指定的范围（如一个自治系统）内只能标识一台设备，不能有重复。因为环回接口的稳定性，我们常使用一个环回接口地址来作为Router-ID，使整个设备标识稳定可靠。 使用环回接口作为Router-ID还有一个好处就是可以节省地址，因为环回接口的地址一般和业务地址没有关系，是独立规划的。 用于虚拟隧道的链接 在建立IPSec或GRE之类的虚拟隧道时，使用loopback接口可以保证整个隧道的稳定性。 用于网络连通性测试 创建并配置好环回端口之后，它的地址是能被ping或telnet的，这就可以被用来测试网络的连通性。 如何创建loopback接口Router(config)# interface loopback[number] 注意：启动OSPF路由选择进程时会选择OSPF的路由器ID。这发生在手动执行了router ospf命令或者在启动过程中加载路由器配置时。因此，如果在启用了OSPF之后再创建环回接口，那么该环回接口将不会被用作路由器ID；然而，如果重新启动路由器，默认将使用环回接口。因此，建议优先创建环回接口并给它先分配IP地址，再启动OSPF,这样可以消除关于路由器ID的困惑]]></content>
      <categories>
        <category>Cisco</category>
      </categories>
      <tags>
        <tag>Cisco知识点</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RIPv1基本配置]]></title>
    <url>%2F2019%2F04%2F16%2FRIPv1%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[RIPv1基本配置#拓扑图： Lo0：表示环回口0，可以把一个环回口想象成路由器上的一个接口接了一台主机，这个主机的地址是1.1.1.1 配置命令配置路由器R1router rip //启动RIP进程 version 1 //配置RIP版本1 network 1.0.0.0 //通告网络 network 192.168.12.0 配置路由器R2router rip version 1 network 192.168.12.0 network 192.168.23.0 配置路由器R3router rip version 1 network 192.168.23.0 network 192.168.34.0 配置路由器R4router rip version 1 network 192.168.34.0 network 4.0.0.0 实验调试查看路由表show ip route 以上输出表面路由器R1学到了三条RIP路由，其中条目“R 4.0.0.0/8[120/3] via 192.168.12.2,00:00:13,Serial0/0/0”的含义如下： R：路由条目是通过RIP路由协议学来的； 4.0.0.0/8：目的网络 120：RIP路由协议的默认管理距离； 3：度量值，从路由器R1到达网络4.0.0.0/8的度量值为3跳； 192.168.12.2：下一跳地址； 00:00:13：距离下一次更新还有17（30-13）秒； Serial0/0/0：接收该条路由条目的本路由器的接口 查看路由协议配置和统计信息show ip protocols Routing Protocols is “rip”:路由器上运行的路由协议是RIP Send updates every 30 seconds,next due in 23 seconds:更新周期是30秒，距离下次更新还有23秒 Outgoing update filter list for all interfaces is not set:在入方向上没有设置过滤列表 Incoming update filter list for all interfaces is not set:在出方向上没有设置过滤列表 Invalid after 180 seconds,hold down 180,flushed after 240:路由条目如果在180秒还没有收到更新，则被标记为无效 Redistributing:rip:只允许rip协议，没有其他的协议重分布进来 Default version control:send version 1, receive version 1:默认发送版本1的路由更新，结束版本1的路由更新]]></content>
      <categories>
        <category>Cisco</category>
      </categories>
      <tags>
        <tag>Cisco强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RIP概述]]></title>
    <url>%2F2019%2F04%2F16%2FRIP%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[动态路由协议包括距离向量路由协议和链路状态路由协议。RIP（Routing Information Protocols，路由信息协议）是使用最广泛的举例向量路由协议。RIP是为小型网络环境设计的，因为这类协议的路由学习及路由更新将产生较大的流量，占用过多的带宽。 概述RIP是由Xerox在70年代开发的，最初定义在RFC1058中，RIP用两种数据包传输更新：更新和请求，每个有RIP功能的路由器默认情况下每隔30秒利用UDP520端口向与它直连的网络邻居广播（RIP v1）或组播（RIP v2）路由更新。因此路由器不知道网络的全局情况，如果路由更新在网络上传播慢，将会导致网络收敛慢，造成路由环路。为了避免路由环路，RIP采用水平分割、毒性逆转、定义最大跳数、闪式更新、抑制计时五个机制来避免路由环路。 RIPv1、RIPv2相同点RIP协议分为版本1和版本2.不论是版本1或者版本2，都具备下面的特征： 都是距离向量路由协议； 使用跳数（Hop Count）作为度量值； 默认路由更新周期为30秒； 管理距离（AD）为120； 支持触发更新； 最大跳数为15跳； 支持等价路径，默认4条，最大6条； 使用UDP520端口进行路由更新； 不同点 RIPv1 RIPv2 在路由器更新的过程中不携带子网信息 在路由器更新的过程中携带子网信息 不提供认证 提供明文和MD5认证 不支持VLSM和CIDR 支持VLSM和CIDR 采用广播更新 采用组播（224.0.0.9）更新 有类别（Classful）路由协议 无类别（Classless）路由协议]]></content>
      <categories>
        <category>Cisco</category>
      </categories>
      <tags>
        <tag>Cisco强化学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[表单新增的元素与属性]]></title>
    <url>%2F2019%2F04%2F15%2F%E8%A1%A8%E5%8D%95%E6%96%B0%E5%A2%9E%E7%9A%84%E5%85%83%E7%B4%A0%E4%B8%8E%E5%B1%9E%E6%80%A7%2F</url>
    <content type="text"><![CDATA[表单内元素的form属性在HTML4中，表单内的从属元素必须书写在表单内部，而在HTML5中，可以把他们书写在页面上任何地方，然后为该元素指定一个form属性，属性值为该表单的id，这样就可以声明该元素从属于指定表单了 123456 < /form>< /textarea> 这样做的好处是，如果你需要向页面添加一些样式，比较好添加，因为它们不会分散在表单之内了，所以添加相关的css效果，也会变得方便很多 表单内元素的formaction属性在HTML4中，一个表单之内的所有元素只能通过表单的action属性被统一提交到另一个页面，而在HTML5中可以为所有的提交按钮，增加不同的formaction属性，使单击不同的按钮时可以将表单提交到不同的页面 123456 提交到xx.jsp页面 提交到xx.jsp页面 提交到xx.jsp页面< /form> 表单内元素的formmethod属性在HTML4中，一个表单内只能有一个action属性用来对表单内所有元素统一指定提交页面，所以每个表单内页只有一个method属性来统一指定提交方法。在HTML5中，可以使用formmethod属性来对每一个表单元素指定不同的提交方法。 提交方法：提交时最常用的有像GET和POST两种方式 1234 提交 提交< /form> 表单内元素的formenctype属性在HTML4中，表单元素具有一个enctype属性，该属性用于指定在表单发送到服务器之前应该如何对表单内的数据进行编码； 在HTML5中，可以使用formenctype属性对表单元素分别指定不同的编码方式； 1234 < /form> formenctype的三种属性 text/plain属性：表单数据中的空格被转换为加号，但不对表单数据中的特殊字符进行编码 multipart/form-data属性：不对字符进行编码，在使用包含文件上传控件的表单时，必须使用改值 application/x-www-form-urlencoded属性：发送前编码所有字符，当表单元素的action属性为get时浏览器则用当前的编码方式把表单数据转换成一个字符]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Valine-访问被api域名白名单拒绝]]></title>
    <url>%2F2019%2F04%2F15%2FValine-%E8%AE%BF%E9%97%AE%E8%A2%ABapi%E5%9F%9F%E5%90%8D%E7%99%BD%E5%90%8D%E5%8D%95%E6%8B%92%E7%BB%9D%2F</url>
    <content type="text"><![CDATA[发现错误 打开LeanCloud控制台点击设置->安全中心 添加相关网站网址 回到网站刷新查看 成功解决！]]></content>
      <categories>
        <category>教学</category>
      </categories>
      <tags>
        <tag>github搭建个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为博客添加域名]]></title>
    <url>%2F2019%2F04%2F15%2F%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D%2F</url>
    <content type="text"><![CDATA[阿里云上购买域名 购买后点击解析 修改IP以及主机记录获得博客IP的方法：在cmd页面ping博客”.github.io后缀”的域名 eg: 点击修改弹出如下窗口，填入相关信息 eg: 记录值中填入博客的IP以及修改主机记录（随意），其他选项默认 创建CNAME文件放入仓库在站点的source文件夹下创建CNAME文件 在CNAME中写入你购买的站点名 添加域名成功！]]></content>
      <categories>
        <category>教学</category>
      </categories>
      <tags>
        <tag>github搭建个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新增的非主体结构元素（一）]]></title>
    <url>%2F2019%2F04%2F14%2F%E6%96%B0%E5%A2%9E%E7%9A%84%E9%9D%9E%E4%B8%BB%E4%BD%93%E7%BB%93%E6%9E%84%E5%85%83%E7%B4%A0%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[在HTML5中，还增加了一些用来表示逻辑结构或者是附加信息的非主体结构元素 header元素 footer元素 hgroup元素 address元素 header元素header元素是一种具有引导和导航作用的结构元素，通常用来放置整个页面或页面内的一个内容区块的标题，但是也可以包含其他内容，例如数据表格、搜索歌单或相关的logo图片 以前我们是通过一个div包裹然后给它设定一个class或者id指定是header用来包含整个页面或页面内的区域块的一个标题 注意：header的出现不一定只有一次，它可以出现多次，不论是在整个页面来表示他的标题，或者说区域块来表示标题都是可以的 旧版的写法1234< /div>< /div>< /div> ##现在的写法 1234567891011 页面标题< /h1>< /header> Hello< /h1> < /header>< /article> 通常一个header元素至少包含一个h元素 完整的例子123456789101112 IT最新技术< /h1> 姚的博客< /a> 学习< /a>< /li> 技术< /a>< /li> 运动< /a>< /li> < /ul> < /nav>< /header>]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新增的主题结构元素（七）]]></title>
    <url>%2F2019%2F04%2F14%2F%E6%96%B0%E5%A2%9E%E7%9A%84%E4%B8%BB%E9%A2%98%E7%BB%93%E6%9E%84%E5%85%83%E7%B4%A0%EF%BC%88%E4%B8%83%EF%BC%89%2F</url>
    <content type="text"><![CDATA[footer元素footer元素可以作为其上层父级内容区块或是一个根区块的脚注。footer通常包括其相关区块的脚注信息，如作者、相关阅读链接及版权信息等。 旧版本和新版本的书写区别旧版的书写方式12345678 版权信息< /a>< /li> 站点地图< /a>< /li> 联系方式< /a>< /li> < /ul>< /div> 新版的书写12345678 版权信息< /a>< /li> 站点地图< /a>< /li> 联系方式< /a>< /li> < /ul>< /footer> footer元素的使用与header元素的使用相似footer元素与header元素一样，一个页面也限制为必要使用一个数量，在当前的页面当中，未必只包含一个footer用来表示底部，它还可以在一个区域块当中进行表示（与header元素的使用比较相似）； eg: 123456789101112 这是一个文章的底部 < /footer>< /article> 这是一个文章的底部 < /footer>< /section> hgroup元素hgroup元素是将标题及其子标题进行分组的元素。hgroup元素通常会将h1~h6元素进行分组，譬如一个内容区块的标题及其子标题算一组 当我们需要为主标题加上一个子标题的时候，尤其是一些文章，或者是一些我们看到的广告，它会有子标题 当只有一个标题的时候，我们就没有必要去使用hgroup;当标题过多，第一个和第二个是同一级，而且他是属于第一个的子标题的时候，此时我们应该使用hgroup将其包裹起来，代表当前他是一个子标题 1234567891011121314151617181920212223 这是文章标题 < /h1> 这是一个子标题< /h2> < /hgroup> 2015-10-10< /time>< /p> < /header> 这是内容 < /div> 这是底部 < /footer>< /article> 内容区域块使用div重载，存在的样式都通过div来进行添加一些css样式]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新增的主题结构元素（六）]]></title>
    <url>%2F2019%2F04%2F14%2F%E6%96%B0%E5%A2%9E%E7%9A%84%E4%B8%BB%E9%A2%98%E7%BB%93%E6%9E%84%E5%85%83%E7%B4%A0%EF%BC%88%E5%85%AD%EF%BC%89%2F</url>
    <content type="text"><![CDATA[address元素address元素的简介address元素用来在文档中呈现联系信息，包括文档作者或者文档维护者的名字、他们的网络链接、电子邮箱、真实地址、电话号码等。address应该不只用来呈现电子邮箱或真实地址，还用来展示跟文档相关的联系人的所有联系地址。 123456789101112131415 < /a> < /a>< /address> < /a> 欢迎来到Yaoremu的博客 < /address> 2015-10-10< /time> < /div>< /footer> HTML5的结构大纲编排的规则显示编排内容区域块显示编排是指明确的使用section等元素创建文档结构，在每个区域块使用标题，类似与< h1 > ~ < h6 >或< hgroup >等…… 隐示编排内容区域块所谓隐示编排指不明确使用section等元素，而是根据网页需求，来写各级的< h1 > ~ < h6 >或者< hgroup >，把各级内容区域块自动创建出来 标题分级从< h1 > ~ < h6 >它的级别是不同的，更具标题不同，那么级别也不同。如果新的出现的标题比上一个标题级别低，将生成下级内容区域块；如果新出现的标题比上一标题级别要高，或者两者级别相等的情况下，将生成新的区域块 不同区域块使用相同级别标题eg: 123456789101112131415161718192021222324252627282930 网页标题< /h1> 首页< /a>< /li> 帮助< /a>< /li> < /ul> < /nav>< /header> 文章主标题< /h1> 文章子标题< /h2> < /hgroup> 文章正文< /p> 评论标题< /h1> 评论正文< /p> < /article> < /div> < /section>< /article> 版权所有...< /small>< /footer>]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新增的主题结构元素（五）]]></title>
    <url>%2F2019%2F04%2F13%2F%E6%96%B0%E5%A2%9E%E7%9A%84%E4%B8%BB%E9%A2%98%E7%BB%93%E6%9E%84%E5%85%83%E7%B4%A0%EF%BC%88%E4%BA%94%EF%BC%89%2F</url>
    <content type="text"><![CDATA[time元素与微格式微格式：它是一种利用HTML5的class属性来对网页添加的附属信息的方法，那么附加的信息有可能新闻发生的时间，日期，个人电话号码，企业邮箱等，微格式并不是在HTML5之后才有的，在HTML5之前它就和HTML结合使用了，但是在使用过程当中发现日期和时间的机器编码上出现了一些问题，编码过程中会产生一些歧义。HTML5增加了一个新的元素，来无歧义的，明确的对机器码时间、日期进行编码，并且让人一读，很容易认出它，这个元素就是TIME元素 Time元素： Time元素代表的是24小时中某一个时刻或者某一个日期，它是允许带时差的 12342015-10-10< /time>2015-10-10< /time>2015-10-10< /time>2015-10-10< /time> 编码时，机器读到的在datetime属性当中，而元素的开始标记和结束标记之间的部分是显示在网页上的 datetime属性 日期与时间之间用T来表示，它是一个间隔分隔符（T代表的是Time） Z表示的是机器编码使用的是UTC标准时间 +时间：表示另一地区的时差，如果是在本地编码，而且是在本地使用就不需要再加这个时差 pubdate属性pubdate是一个可选的，布尔类型的值得属性，它可以用在article元素中的time元素上，意思是time元素代表了文章或者整个网页的发布日期，pubdate属性的具体使用方法通过下面案例来演示。 提问：为什么使用pubdate属性，为什么不能直接使用time表示当前发布的一个日期 1234567891011 苹果< /h1> 发布日期 2015-10-10< /time> < /p> 舞会时间 2015-10-12< /time> < /p> < /header>< /article> 此时程序中有两个time，所以我们要有一个明确的time来指出他是一个发布时间，这个时候我们就在第一个time中加上一个pubdate，用它来表示当前具体的发布时间]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新增的主题结构元素（四）]]></title>
    <url>%2F2019%2F04%2F13%2F%E6%96%B0%E5%A2%9E%E7%9A%84%E4%B8%BB%E9%A2%98%E7%BB%93%E6%9E%84%E5%85%83%E7%B4%A0%EF%BC%88%E5%9B%9B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[section元素section元素用于对网站或应用程序中页面上的内容进行分块。一个section元素通常由内容及其标题组成。但section元素并非一个普通的容器元素；当一个容器需要被直接定义样式或通过脚本定义行为时，推荐使用div而非section元素。 通常不推荐为那些没有标题内容使用section元素。 section元素的作用是对页面上的那些内容进行分块，或者说对文章进行分段，请不要与有了自己完整的独立的内容的aritcle元素进行混淆。 123456789101112131415161718 苹果< /h1> 这是一个苹果，可以吃。而且很好吃< /p>< /section> 苹果< /h1> 这是一个苹果，可以吃。而且很好吃 红富士< /h2> 这是一种外表很红的苹果，吃起来也不赖< /p> < /section> 国光< /h2> 这是一种外表很红的苹果，吃起来也不赖< /p> < /section>< /article> 第一行不适用section的原因：这里可以使用section元素，但是由于其结构非常清晰，分析器可以识别第一行内容在一个section元素当中，所以可以将第一个section进行省略 section与article的区别123456789 水果< /h1> pingguo< /h2> 内容< /p> < /article>< /section> 在HTML5中，article元素可以看成是一个特殊类的section元素，它比section元素更加强调独立性，既section元素强调分段或分块，而article元素强调的是独立性。具体来说，如果一块内容相对于比较独立、完整的时候，应该使用article元素；但如果想将一块内容分为几段，那这个时候可以使用section元素。 在HTML5中，div元素作为一个容器的存在，当使用css样式时，可以对这个容器进行总体的css样式的嵌套;即不要讲section元素作为设置样式页面的容器，这是div的工作 总结 不要讲section元素作为设置样式的页面容器； 如果article元素、aside元素、nav元素更符合使用条件，那不要使用section元素 没有标题内容，不要section元素；section元素是要存在一个标题的]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新增的主题结构元素（三）]]></title>
    <url>%2F2019%2F04%2F12%2F%E6%96%B0%E5%A2%9E%E7%9A%84%E4%B8%BB%E9%A2%98%E7%BB%93%E6%9E%84%E5%85%83%E7%B4%A0%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[nav元素是一个可以用在页面导航的连接组，其中的导航元素链接到其他的页面或当前页面的其他部分。并不是所有的连接组都要被放进nav元素，只需要将主要的、基本的链接组放进nav元素即可。 nav元素的应用场景： 传统导航条 侧边栏导航 页内导航 翻页操作 nav元素通常承载一个列表元素 nav元素是可以多处使用的 12345678910111213141516171819202122232425262728293031 主页< /a>< /li> 开发文档< /a>< /li>< /nav> HTML5与CSS3的历史< /h1> HTML5历史< /a>< /li> CSS3历史< /a>< /li> < /ul> < /nav> < /header> HTML5历史< /h1> ....< /p> < /section> CSS3的历史< /h1> ....< /p> < /section> 删除< /a> 修改< /a> < /footer>< /article> 版权声明：< /small>< /p>< /footer> 标签定义文档中的节（section、区段）。比如：章节、页眉、页脚或文档中的其他部分。 注意：HTML5中不能使用menu元素代替nav元素。manu元素是用在一系列发出命令的菜单上的，是一种交互性的元素，确切点说是使用在web应用程序中的。]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新增的主题结构元素（二）]]></title>
    <url>%2F2019%2F04%2F12%2F%E6%96%B0%E5%A2%9E%E7%9A%84%E4%B8%BB%E9%A2%98%E7%BB%93%E6%9E%84%E5%85%83%E7%B4%A0%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[aside元素aside元素用来表示当前页面或文章的附属信息部分，它可以包含与当前页面或主要内容相关的引用，侧边栏、广告、导航条以及其他类似有区别于主要内容的部分。 article元素内使用aside元素是针对于article元素的名词解释；eg：在< p>下面存放了一个aside元素，用来存放名词解释的部分； 12345678 语法< /h1> 文章的正文......< /p> 名词解释< /h1> 语法：这是一个对语言来说很重要的内容体< /p> < /aside>< /article> article元素之外使用作为页面或站点全局的附属信息部分，最典型的形式是侧边栏，其中的内容是可以有一些链接，博客中的或者是文章列表、广告单元等等； （我们也可以在aside元素中添加一个弹出窗，然后把它当成一个广告单元，在很多论坛上经常会看到在右下角会弹出一个框，可以给它加一下样式，然后让他弹出来就会是一个广告单元；既可以通过aside来进行承载） 1234567891011121314151617181920 语法< /h1> 文章的正文......< /p> 名词解释< /h1> 语法：这是一个对语言来说很重要的内容体< /p> < /aside>< /article> 评论 2018-3-10< /a>< /li> 大牛：真希望能好好学习一下 < /a>< /li> < /nav>< /aside> nav元素：表示导航 通过使用article元素我们可以发现当前页面的语义化是非常明确的，让人读起来是一下就可以了然，我就知道你当前是在哪、或者做什么的、它的具体作用是什么；]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新增的主题结构元素（一）]]></title>
    <url>%2F2019%2F04%2F11%2F%E6%96%B0%E5%A2%9E%E7%9A%84%E4%B8%BB%E9%A2%98%E7%BB%93%E6%9E%84%E5%85%83%E7%B4%A0%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[article元素article元素 代表文档、页面或应用程序中独立的、完整的、可以独自被外部引用的内容。它可以是一篇博客或者报刊中的文章，一篇论坛帖子、一段用户评论或独立的插件，或其他任何独立的内容。 eg: 12345678910 YaoRemu< /h1> Hello，欢迎来到YaoRemu的博客< /p> Hello< /p> 这是底部< /p> < /footer>< /article> article元素是可以嵌套使用的 内层的内容在原则上需要与外层的元素相关联（eg：一篇博客文章中，针对于该文章的评论，就可以使用嵌套article元素的方式，因它们有一个所属关系，用来呈现当前的评论，可以使用article元素来进行包裹一下） eg: 123456789101112131415161718192021 YaoRemu< /h1> Hello，欢迎来到YaoRemu的博客< /p> < /header> 作者 < /header> 评论 < /p> time < /footer> < /aritcle> 这是底部< /p> < /footer>< /article> 为了更加的语义化，更加的方便我们去阅读源码，可以使用article元素，使用article元素代替div后，从语义化来说，它是非常方便的，但是从内容的呈现角度来说，他们是没有区别的。 article元素可以用来表示插件eg: 12345678910111213141516171819202122232425262728 YaoRemu< /h1> Hello，欢迎来到YaoRemu的博客< /p> < /header> 作者 < /header> 评论 < /p> time < /footer> < /aritcle> 这是底部< /p> < /footer>< /article> 这是一个内嵌页面< /h1> < /embed> < /object>< /article> eg: < embed>标签定义嵌入的内容，比如插件（演示中表示引入当前页面）]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新增的元素和废除的元素]]></title>
    <url>%2F2019%2F04%2F11%2F%E6%96%B0%E5%A2%9E%E7%9A%84%E5%85%83%E7%B4%A0%E5%92%8C%E5%BA%9F%E9%99%A4%E7%9A%84%E5%85%83%E7%B4%A0%2F</url>
    <content type="text"><![CDATA[新增的元素新增的结构元素section、article、aside、header、hgroup、footer、nav、figure section：页面中的内容块（eg：章节、页眉、页脚……），可以与< h1>~< h6>等元素结合使用，表示文档的结构 article：页面中的一块与上下文不相干的独立内容（eg：博客中的一篇文章、报纸中的一篇文章） aside：表示article元素内容之外的，与article元素内容相关的补助信息 header：表示页面中的一个内容区域块，通常用它来表示标题 hgroup：用于对整个页面或者页面中的一个内容块的标题进行结合 footer：表示页面中的一个部分、一个区域块，通常表示这个区域块的脚部（底部），通常我们会用它来承载作者的姓名，日期等一下与作者相关的元素 nav：表示页面中的导航链接部分 figure：表示一段独立的流的内容，一般表示文档中主体流内容中的一个独立的单元 新增的其他元素video、audio、embed、mark、progress、meter、time、ruby、rt、rp、wbr、canvas、command、details、datalist、datagrid、keygen、output、source、menu video：video元素来定义视频（eg：电影片段、视频流） audio：定义音频、音乐或者音频流 canvas：画布，对于画布我们比较注重，因为无论是在应用当中还是在游戏当中，我们对canvas的应用都比较多；canvas表示图形（eg：图表或者其他图形），这个元素本身没有行为，仅仅提供一块画布，但它的一个绘图API展示给客户端JavaScript以及脚本，能够把想绘制的东西绘制在这块画布上 新增的input元素的类型email、url、number、range、Date Pickers email：email表示必须输入的email地址 url：表示文本框输入的一个地址 number：表示数字 range：表示输入框内的一个数字的范围值 Date Pickers：关于日历的日期，时间， 废除的元素能使用CSS替代的元素：basefont、big、center、font、s、tt、u等不再使用frame框架对于< frameset>元素，< frame>元素以及< noframes>元素，由于frame框架对网页可用性存在负面的影响，在HTML5当中以及不支持frame框架，只支持iframe，或者用服务器创建的由多个页面组成的复合页面的形式，同时，以上三个元素被废除 只能部分浏览器支持的元素其他被废除的元素新增的属性和废除的属性新增的属性 表单相关的属性 链接相关的属性 其他属性 废除的属性在后面的文章进行详解]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML5与HTML4区别]]></title>
    <url>%2F2019%2F04%2F10%2FHTML5%E4%B8%8EHTML4%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[推出理由及目标HTML5的储蓄，对于Web来说的意义是非常重大的，因为他的意图是想把目前Web上纯在的各种问题一并解决掉了。 Web浏览器之间的兼容性很低 （规范不统一，没有标准化） 文档结构不够明确 （之前表示文档的标题、正文都是使用< div>来排版，结构比较混乱） Web应用程序的功能收到了限制 世界知名浏览器厂商对HTML5的支持：微软（IE9以下不支持）、Google、苹果、opera、Mozilla 语法的改变内容类型文件扩展符（.html、.htm）与内容类型（text.html）保持不变； DOCTYPE声明在HTML4中，我们要明确的指出是哪一个版本；而在HTML5中可以省略部分内容； eg: < !DOCTYPE html> 指定字符编码在HTML4中需要很多声明；eg: < meta http-equiv="content-type" content="text/html;charset=UTF-8"> 在HTML5中则非常简单；eg: < meta charset="UTF-8"> 可以省略标记的元素在HTML5中，元素的标记可以进行省略（详细内容之后再提）； 具有boolean值的属性当这些属性值不指定属性值时，默认表现为true；如果想将属性设为固定的true，可将属性值设为属性名，或者字符串设置为空，不写（默认为true）； 如果想将属性值设为false，可不写该属性； eg: 前三true，最后一个false 省略引号指定属性值时，必须指定引号；但是在HTML5中，可以省略引号;]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[全局属性]]></title>
    <url>%2F2019%2F04%2F10%2F%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0-%E5%85%A8%E5%B1%80%E5%B1%9E%E6%80%A7%2F</url>
    <content type="text"><![CDATA[contentEditable属性允许用户编辑元素中的内容，取值为true【可编辑】、false【不可编辑】eg: designMode属性指定整个页面是否可以编辑（只能在JavaScript中修改编辑），取值：on【可编辑】、off【不可编辑】 hidden属性通知浏览器不渲染该元素，使该元素为不可见状态，取值：true【可见状态】、false【不可见状态】eg:不可见状态 spellcheck属性针对input元素与textarea文本输入框提供的新属性，对用户输入的文本内容进行拼写和文本检查eg: tabindex属性不断敲击tab键，让窗口或页面中的控件获得焦点，对窗口中的所有控件进行遍历，每一个tableindex属性表示该接口是第几个访问到的eg:]]></content>
      <categories>
        <category>前端知识</category>
      </categories>
      <tags>
        <tag>【极客】前端学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown进阶操作]]></title>
    <url>%2F2019%2F04%2F10%2FMarkDown%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[图片处理有时候希望图片变得小一点，或者让他靠左边，使得排版更加美观，但是默认没有提供这类操作，可以直接引入HTML来设置； 基本形式 ！[图片描述]（图片链接） 例子： ！[头像]（ http://ww1.sinaimg.cn/large/8c0b2220gy1g1ae3jfoogj20du0duwf0.jpg ） 自定义尺寸 < img width=’150’ height=’150’ src=” http://ww1.sinaimg.cn/large/8c0b2220gy1g1ae3jfoogj20du0duwf0.jpg “> 插入音乐在网易云音乐生成外连接，直接复制黏贴即可；（如果不想自动播放，可以把auto改成0） < iframe frameborder=”no” border=”0” marginwidth=”0” marginheight=”0” width=330 height=86 src=”//music.163.com/outchain/player?type=2&id=29979976&auto=1&height=66”> 插入视频 视频与图片和音乐同理，不在赘述； 设置不同的字体颜色 < font color=red>我是红色 eg: 我是红色 设置不同类型的字体 < font face=”黑体”>我是黑体 eg: 我是黑体 添加背景色 < table>< tr>< td bgcolor=”red”> 背景色是:red < / td>< / tr>< / table> eg: 背景色是:red]]></content>
      <categories>
        <category>教学</category>
      </categories>
      <tags>
        <tag>MarkDown基本语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络端口地址转换NAPT配置]]></title>
    <url>%2F2019%2F03%2F31%2F%E7%BD%91%E7%BB%9C%E7%AB%AF%E5%8F%A3%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2NAPT%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[拓扑图 相关知识①：NAT将网络划分为内部网络和外部网络两部分，局域网主机利用NAT访问网络时，是将局域网内部的本地地址转换为全局地址（互联网合法的IP地址）后转发数据包； 相关知识②：NAT分为两种类型：NAT（网络地址转换）和NAPT（网络端口地址转换IP地址对应一个全局地址）； 相关知识③：NAPT：使用不同的端口来映射多个内网IP地址到一个指定的外网IP地址，多对一。NAPT采用端口多路复用方式。内部网络的所有主机均可共享一个合法外部IP地址实现对Internet的访问，从而可以最大限度地节约IP地址资源。同时，又可以隐瞒内部的所有主机，有效的避免来自Internet的攻击。因此，目前网络中应用最多的就是端口多路复用方式 配置命令配置Router0enable configure terminal hostname R0 配置端口interface fa0/0 ip address 192.168.1.1 255.255.255.0 no shutdown exit interface s0/0/0 ip address 200.1.1.1 255.255.255.0 no shutdown clock rate 64000 exit 配置Router1enable configure terminal hostname R1 配置端口interface s0/0/0 ip address 200.1.1.2 255.255.255.0 no shutdown exit interface fa0/0 ip address 200.1.2.1 255.255.255.0 no shutdown exit 配置Router0静态路由ip route 200.1.2.0 255.255.255.0 200.1.1.2 配置Router1静态路由ip route 192.168.1.0 255.255.255.0 200.1.1.1 查看路由表end show ip route 使用PC1测试能否与服务器通信CMD Web浏览器 Router0上进行网络端口地址转换NAPT配置interface fa0/0 ip nat inside //设定私有地址连接口 exit interface fa2/0 ip nat outside //设定公有地址连接口 exit access-list 1 permit 192.168.1.0 0.0.0.255 //建立一个控制列表，列表名为1，用来定义内部使用的私有IP地址段，为地址段转换为公网IP做准备 ip nat pool 5ijsj 200.1.1.3 200.1.1.3 netmask 255.255.255.0 //定义一个IP地址池 ip nat inside source list 1 pool 5ijsj overload //启用内部源地址转换为动态NAT //无overload表示多对多，有overload表示多对一 end show ip nat translations //查看NAT转发表 实验结果PC1使用Web浏览器范文服务器 查看NAT转发表show ip nat translations(有1个结果) PC2使用web浏览器访问服务器 eg: 再次查看NAT转发表show ip nat translations(有2个结果) eg:]]></content>
      <categories>
        <category>Cisco</category>
      </categories>
      <tags>
        <tag>Cisco基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络地址转换NAT配置]]></title>
    <url>%2F2019%2F03%2F30%2F%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2NAT%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[拓扑图 相关知识①：网络地址转换NAT（Network Address Translation）,被广泛应用于各种类型Internet接入方式和各种类型的网络中。原因很简单，NAT不仅完美地解决了IP地址不足的问题，而且还能够有效地避免来自网络外部的攻击，隐藏并保护网络内部的计算机。 相关知识②：默认情况下，内部IP地址是无法被路由到外网的，内部主机10.1.1.1要与外部Internet通信，IP包到达NAT路由器时，IP包头的源地址10.1.1.1被替换成一个合法的外网IP，并在NAT转发表中保存这条记录。 当外部主机发送一个应答到内网时，NAT路由器收到后，查看当前NAT转换表，用10.1.1.1替换掉这个外网地址。 相关知识③：NAT将网络划分为内部网络和外部网络两部分，局域网主机利用NAT访问网络时，将局域网内部的本地地址转换为全局地址（互联网合法的IP地址）后转发数据包； 相关知识④：NAT分为两种类型：NAT（网络地址转换）和NAPT（网络端口地址转换IP地址对应一个全局地址）；①、 静态NAT：实现内部地址与外部地址一对一映射。现实中，一般都用于服务器；②、 动态NAT：定义一个地址池，自动映射，也是一对一的。现实中，用的比较少；③、 NAPT：使用不同的端口来映射多个内网IP地址到一个指定的外网IP地址，多对一； 配置命令配置Router0enable configure terminal hostname R0 配置路由器端口interface fa0/0 ip address 192.168.1.1 255.255.255.0 no shutdown exit interface s0/0/0 ip address 222.0.1.1 255.255.255.0 no shutdown clock rate 64000 exit 配置Router1enable configure terminal hostname R1 配置路由器端口interface s0/0/0 ip address 222.0.1.2 255.255.255.0 no shutdown exit interface fa0/0 ip address 222.0.2.1 255.255.255.0 no shutdown exit Router0静态路由配置ip route 222.0.2.0 255.255.255.0 222.0.1.2 Router1静态路由配置ip route 192.168.1.0 255.255.255.0 222.0.1.1 使用PC0尝试与服务器通信ping 192.168.1.2 （成功通信） Web浏览器 （成功通信） Router0进行NAT配置interface fa0/0 ip nat inside //设定私有地址连接口(局域网) exit interface fa s0/0/0 ip nat outside //设定公有地址连接口(广域网) exit ip nat inside source static 192.168.1.2 222.0.1.3 //设置NAT地址，将内网地址映射为外网地址 end show ip nat translations //查看NAT转发表 知识点①：对于路由器来说：①inside对应的是access-list（访问控制列表）、②outside对应的是转换地址池； 实验结果ping被转换后的地址： 222.0.1.3 （成功通信） Web浏览器中尝试访问转换后的地址：222.0.1.3 （成功通信）]]></content>
      <categories>
        <category>Cisco</category>
      </categories>
      <tags>
        <tag>Cisco基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[扩展IP访问控制列表配置]]></title>
    <url>%2F2019%2F03%2F29%2F%E6%89%A9%E5%B1%95IP%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[拓扑图 知识点①：访问控制列表定义的典型规则主要有以下：源地址，目标地址，上层协议，时间区域；扩展IP访问列表（编号100-199、2000、2699）使用以上四种组合来进行转发或阻断分组；可以根据数据包的源IP、目的IP、源接口、目的接口、协议来定义规则，进行数据包的过滤。 知识点②：扩展IP访问列表的配置包括以下两部分：①定义扩展IP访问列表；②将扩展IP访问列表应用于特定接口上； 配置命令配置Router0端口enable configure terminal hostname R0 interface fa0/0 ip address 172.16.1.1 255.255.255.0 no shutdown exit interface fa0/1 ip address 172.16.2.1 255.255.255.0 no shutdown exit 配置Router1端口enable configure terminal hostname R1 interface fa0/1 ip address 172.16.2.2 255.255.255.0 no shutdown exit interface s0/0/0 ip address 172.16.3.1 255.255.255.0 no shutdown clock rate 64000 配置Router2端口enable configure terminal hostname R2 interface s0/0/0 ip address 172.16.3.2 255.255.255.0 no shutdown exit interface fa0/0 ip address 172.16.4.1 255.255.255.0 no shutdown exit 配置Router0静态路由ip route 0.0.0.0 0.0.0.0 172.16.2.2 配置Router2静态路由ip route 0.0.0.0 0.0.0.0 172.16.3.1 配置Router1静态路由ip router 172.16.1.0 255.255.255.0 172.16.2.1 ip router 172.16.4.0 255.255.255.0 172.16.3.2 end show ip route //查看路由表 实验PC0尝试与服务器通信ping 172.16.4.2（此时成功通信） 使用网页尝试通信 Router1上配置扩展IP访问控制列表configure terminal 允许源主机地址使用TCP协议通过出站端口访问目标地址WEB服务器access-list 100 permit tcp host 172.16.1.2 host 172.16.4.2 eq www 禁止源主机地址使用icmp协议通过出站端口到达目标主机地址WEB服务器access-list 100 deny icmp host 172.16.1.2 host 172.16.4.2 echo 知识点①：echo表示：传递echo报文 知识点②：ICMP协议（Internet Control Message Protocol Internet控制报文协议）：TCP/IP协议簇的一个子协议，用在IP主机，路由器之间传递控制消息；控制消息：指网络通不通，主机是否可达、路由是否可用等网络本身的消息； 将ACL应用到端口interface s0/0/0 ip access-group 100 out end 实验结果ping 172.16.4.2（此时无法通信） 使用网页尝试通信（此时成功通信）]]></content>
      <categories>
        <category>Cisco</category>
      </categories>
      <tags>
        <tag>Cisco基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[标准 IP 访问控制列表配置]]></title>
    <url>%2F2019%2F03%2F28%2F%E6%A0%87%E5%87%86-IP-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[拓扑图 相关知识①：ACLs 的全称为 接入控制列表(Access Control Lists),也称访问控制列表(Access Lists),俗称防火墙，在有的文档中还称包过滤。 相关知识②：ACLs 通过定义一些规则对网络设备接口上的数据报文进行控制；运行通过或者丢失，从而提高网络可管理型和安全性； 相关知识③：IP ACL分为两种：标准IP访问列表和扩展IP访问列表，编号范围为 1~99、1300~1999、100~199、2000~2699;标准IP访问控制列表：根据数据包的源地址定义规则，进行数据包的过滤；扩展IP访问控制列表：根据数据包的源IP、目的IP、源接口、目的端口、协议来定义规则，进行数据包的过滤； 相关知识④：IP ACL 基于接口进行规则的应用，分为：入栈应用和出栈应用； 配置命令配置路由器0enable configure terminal hostname R0 配置端口interface fa 0/0 ip address 172.16.1.1 255.255.255.0 no shutdown exit interface fa0/1 ip address 172.16.2.1 255.255.255.0 no shutdown exit interface s0/0/0 ip address 172.16.3.1 255.255.255.0 no shutdown clock rate 64000 exit 配置路由器1enable configure terminal hostname R1 配置端口interface s0/0/0 ip address 172.16.3.2 255.255.255.0 no shutdown exit interface f0/0 ip address 172.16.4.1 255.255.255.0 no shutdown exit 配置路由器0的静态路由配置静态路由ip route 172.16.4.0 255.255.255.0 172.16.3.2 配置路由器1的静态路由配置静态路由ip route 0.0.0.0 0.0.0.0 172.16.3.1 查看路由表end show ip route PC0、PC1尝试能否与PC2通信PC0: （此时成功通信） PC1: （此时成功通信） 在路由器0中配置访问控制列表建立ACL命名为 5ijsjip access-list standard 5ijsj permit 172.16.1.0 0.0.0.255 //允许网段通过 deny 172.16.2.0 0.0.0.255 //禁止网段通过 interface s0/0/0 ip access-group 5ijsj out //将ACL应用到相关端口 end 知识点：in表示过滤入口的包；out表示过滤出口的包； 实验结果再次PC0、PC1尝试能否与PC2通信PC0: （由于ACL允许 172.16.1.0 网段通过，所以PC0成功通信） PC1: （由于ACL禁止 172.16.1.0 网段通过，所以PC1通信失败）]]></content>
      <categories>
        <category>Cisco</category>
      </categories>
      <tags>
        <tag>Cisco基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OSPF、RIP小记]]></title>
    <url>%2F2019%2F03%2F28%2FOSPF%E3%80%81RIP%E5%B0%8F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[OSPF可将OSPF比喻成导航，可以实时更新； RIP将RIP比喻成路标，是固定不变的，除非人为修改；]]></content>
      <categories>
        <category>Cisco</category>
      </categories>
      <tags>
        <tag>Cisco笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[路由器综合路由配置]]></title>
    <url>%2F2019%2F03%2F27%2F%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%BC%E5%90%88%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[拓扑图 相关知识①：运行多个路由协议进程，系统软件提供了路由信息从一个路由进程重新分布到另一个路由进程的功能；路由的相互重分布可以再所有的IP路由协议之间进行。相关命令：redistribute protocol … 相关知识②：路由重分发，可在同一网内使用多种路由协议，为了实现多种路由协议的协同工作，路由器可以使用路由重分发(route redistribution) 将学习到的一种路由协议的路由通过另一种路由协议广播出去，这样网络的所有部分就可以互通了。为了实现重分发，路由器必须同时运行多种路由协议，这样每种路由协议才可以取路由表中的所有或部分其他协议的路由来进行广播； 配置命令配置三层路由器Switch0enable configure terminal 开启Vlanvlan 2 exit 划分Vlan给端口fa0/10interface fa0/10 switchport access vlan 2 exit 注意：由于vlan1默认是划分给所有端口的，所以可以省略划分vlan1 配置Vlaninterface vlan 1 ip address 192.168.1.1 255.255.255.0 no shutdown exit interface vlan 2 ip address 192.168.2.1 255.255.255.0 no shutdown exit 查看Vlan信息end show interface vlan 1 在路由器上启动rip协议configure terminal ip routing //开启三层交换机路由功能 router rip //配置RIP协议 network 192.168.1.0 //宣告本地路由和相连路由之间的网段 network 192.168.2.0 version 2 //设置RIP版本 配置路由器Router0enable configure terminal hostname R1 配置端口interface fa0/0 ip address 192.168.2.2 255.255.255.0 no shutdown exit interface fa0/1 ip address 192.168.3.1 255.255.255.0 no shutdown exit 在路由器启动rip协议router rip network 192.168.2.0 version 2 在路由器启动ospf协议router ospf 1 //配置OSPF协议 network 192.168.3.0 0.0.0.255 area 0 //宣告直连网络 配置路由器Router1enable configure terminal hostname R2 配置端口interface fa0/1 ip address 192.168.3.2 255.255.255.0 no shutdown exit interface fa0/0 ip address 192.168.4.1 255.255.255.0 no shutdown exit 在路由器启动ospf协议router ospf 1 network 192.168.3.0 0.0.0.255 area 0 network 192.168.4.0 0.0.0.255 area 0 查看路由表end show ip route 实验结果使用Router0（中间的路由器）测试与两台PC是否能够通信ping 192.168.1.2 (success) ping 192.168.4.2 (success) 尝试PC0与PC1通信 （此时无法通信） 配置Router0（中间的路由器）configure terminal 路由重分布router rip redistribute ospf 1 //ospf路由重发布 exit router ospf 1 redistribute rip subnets //rip路由重发布 end 注意： 本例在Packet Tracer 5.2上能够正常运行，但是在Packet Tracer 5.3 上的Switch0不能学习到192.168.3.0/192.168.4.0的路由信息，所以需要给Switch0指定静态路由: ip route 0.0.0.0 0.0.0.0 192.168.2.2 再次Router1查看路由表 （查看路由重发布后该路由器学习到的路由） show ip route 再次尝试PC0与PC1通信 （成功通信）]]></content>
      <categories>
        <category>Cisco</category>
      </categories>
      <tags>
        <tag>Cisco基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[路由器OSPF动态路由配置]]></title>
    <url>%2F2019%2F03%2F26%2F%E8%B7%AF%E7%94%B1%E5%99%A8OSPF%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[拓扑图 相关知识①：OSPF(Open Shortest Path First 开放式最短路径优先)是一个内部网关协议(Interior Gateway Protocol，检测IGP)，用在单一自治系统(autonomous system,AS)内决策路由。与RIP相比，OSPF是链路状态协议，而RIP是距离矢量协议。 相关知识②：OSPF开放式最短路径优先协议，是目前网络中应用最广泛的路由协议之一；OSPF路由协议通过向全网扩散本设备的链路状态信息，使网络中每台设备最终同步一个具有全网链路状态的数据库，然后路由器采用SPF算法，以自己为根，计算到达其他网络的最短路径，最终形成全网路由信息； 配置命令配置三层交换机S3569enable configure terminal hostname S3569 划分Vlan给端口vlan 10 exit valn 20 exit interface fa 0/10 switchport access vlan 10 exit interface fa 0/20 switchport access vlan 20 exit 配置Vlaninterface vlan 10 ip address 192.168.1.1 255.255.255.0 no shutdown exit interface vlan 20 ip address 192.168.3.1 255.255.255.0 no shutdown exit end show ip route //查看路由表 配置OSPF动态路由协议configure terminal ip routing //开启三层交换机路由功能 router ospf 1 //启动OSPF进程 network 192.168.1.0 0.0.0.255 area 0 //通告直连网络 network 192.168.3.0 0.0.0.255 area 0 end show ip route 知识点①：OSPF宣告是要加反掩码的； 知识点②：area是自治系统区域的标识，eg：如果全局在一个area中，那么它们属于一个自治系统，也成单区域自治系统； 配置路由器R1enable configure terminal hostname R1 配置端口interface fa0/0 no shutdown ip address 192.168.3.2 255.255.255.0 exit interface serial 0/0/0 no shutdown clock rate 64000 ip address 1952.168.4.1 255.255.255.0 end show ip route 配置OSPF动态路由协议configure terminal router ospf 1 network 192.168.3.0 0.0.0.255 area 0 network 192.168.4.0 0.0.0.255 area 0 end show ip route 配置路由器R2enable configure terminal hostname R2 配置端口interface fa 0/0 no shutdown ip address 192.168.2.1 255.255.255.0 exit interface serial 0/0/0 no shutdown ip address 192.168.4.2 255.255.255.0 end show ip route 配置OSPF动态路由协议configure terminal router ospf 1 network 192.168.2.0 0.0.0.255 area 0 network 192.168.4.0 0.0.0.255 area 0 end show ip route 实验结果验证 PC1、PC2 主机之间可以互相通信；eg:]]></content>
      <categories>
        <category>Cisco</category>
      </categories>
      <tags>
        <tag>Cisco基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[路由器RIP动态路由配置]]></title>
    <url>%2F2019%2F03%2F25%2F%E8%B7%AF%E7%94%B1%E5%99%A8RIP%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[拓扑图 相关知识①：动态路由是指路由器能够自动的建立自己的路由表，并且根据实际情况适时的进行调整； 相关知识②：RIP(routing infromation protocol)路由信息协议：一种内部网关协议（IGP），是一种动态路由选择协议；RIP协议基于距离矢量算法，使用“跳数(metric)”来衡量到达目标地址的路由协议。（该协议的路由器只关心自己周围的世界，只与自己相连的路由器交换信息，范围在15跳之内）； 相关知识③：RIPv1与RIPv2的区别： 配置命令配置三层交换机enable configure terminal hostname S3560 划分vlan给端口vlan 10 exit vlan 20 exit interface fa0/10 switchport access vlan 10 exit interface fa0/20 switchport access vlan20 exit end show vlan 配置vlanconfigure terminal interface vlan 10 ip address 192.168.1.1 255.255.255.0 no shutdown exit interface vlan 20 ip address 192.168.3.1 255.255.255.0 no shutdown end show ip router //查看路由表 show running //查看当前配置 在三层交换机上启动rip协议configure terminal router rip //启动rip协议 network 192.168.1.0 //宣告本地路由和相连路由之间的网段 network 192.168.3.0 version 2 //设置RIP版本为2 end show ip route 配置Router2enable configure terminal hostname R2 配置端口interface fa0/0 no shutdown ip address 192.168.3.2 255.255.255.0 interface serial0/0/0 //配置路由器的串行接口 no shutdown ip address 192.168.4.1 255.255.255.0 clock rate 64000 //配置时钟频率 end show ip route 知识点①：在Packet Tracert模拟器中，必须设置时钟速率，否则路由器之间无法ping通； 知识点②：serial口：路由器连接路由器就要用路由器上的Serial端口连接 在路由器上启动rip协议conf t router rip network 192.168.3.0 network 192.168.4.0 version 2 exit 配置Router1enable configure terminal hostname R1 配置端口interface fa0/0 no shutdown ip address 192.168.2.1 255.255.255.0 interface serial0/0/0 no shutdown ip address 192.168.4.2 255.255.255.0 end show ip route 在路由器上启动rip协议configure terminal router rip network 192.168.2.0 network 192.168.4.0 version 2 end 实验结果查看拓扑图中的的两台PC是否正常通信；eg:]]></content>
      <categories>
        <category>Cisco</category>
      </categories>
      <tags>
        <tag>Cisco基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[路由器静态路由配置]]></title>
    <url>%2F2019%2F03%2F24%2F%E8%B7%AF%E7%94%B1%E5%99%A8%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[拓扑图 注：由于路由器[2811]初始时没有Serial接口，所以需要在图形化界面安装上[WIC-2T]组件； 配置命令配置Router1各个端口enable configure terminal hostname R1 interface fa0/1 no shutdown //开启端口 ip address 192.168.1.1 255.255.255.0 //配置端口IP以及子网掩码 exit interface serial 0/0/0 //配置串行接口 no shutdown ip address 192.168.3.1 255.255.255.0 clock rate 64000 //设置时钟评率，起同步作用 end 知识点①：Serial是用V35线来传输数据是同步的，连接时需要DCE同步时钟速率； 知识点②： 路由器连接路由器要用路由器上的Serial端口连接； 配置Router2各个端口enable configure terminal hostname R2 interface fa0/1 no shutdown ip address 192.168.2.1 255.255.255.0 exit interface serial 0/0/0 ip address 192.168.3.2 255.255.255 no shutdown end 配置R1静态路由enable configure terminal ip route 192.168.2.0 255.255.255.0 192.168.3.2 //配置静态路由 end show ip route //查看路由表 知识点①：ip route 静态路由格式： ip route 目标网段 目标的子网掩码 目标网段的接口 配置R2静态路由enable configure terminal ip route 192.168.1.0 255.255.255.0 192.168.3.1 //配置静态路由 end show ip route 实验结果测试PC1是否ping通PC2;eg:]]></content>
      <categories>
        <category>Cisco</category>
      </categories>
      <tags>
        <tag>Cisco基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[路由器单臂路由配置]]></title>
    <url>%2F2019%2F03%2F23%2F%E8%B7%AF%E7%94%B1%E5%99%A8%E5%8D%95%E8%87%82%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[拓扑图 配置命令配置Switchenable configure terminal vlan 2 exit vlan 3 exit interface fastEthernet 0/2 switchport access vlan 2 //将端口划分给Vlan2 exit interface fastEthernet 0/3 switchport access vlan 3 //将端口划分给Vlan3 exit interface fastEthernet 0/1 switchport mode trunk //设置端口为trunk模式 知识点：数据包经过trukn会封装新的包头，添加对应的Vlan信息；当目标接受到该数据包，即可解包查看对应的Vlan，然后发送个对应的Vlan； 配置Routerenable configure terminal interface fastEthernet 0/0 no shutdown //开启路由器端口 exit interface fastEthernet 0/0.1 //配置虚拟子接口 encapsulation dot1q 2 //配置以太网子接口Vlan号，封装格式为802.1q ip address 192.168.1.1 255.255.255.0 //设置端口ip及其子网掩码 exit interface fastEthernet 0/0.2 encapsulation dot1q 3 ip address 192.168.2.1 255.255.255.0 end show ip route //查看路由表信息 知识点①：dot1q(802.1q): 虚拟局域网标准，在路由器中dot1q为虚拟局域网的封装模式； 知识点②：为什么要划分子接口？ 多vlan通信，各vlan间的网段不同，网关不同，但是交换机只连接路由器上的一个物理端口，所以划分多个虚拟子接口，以便于配置多个地址作为vlan的网关地址 实验结果PC1与PC2实现多Vlan通信； eg:]]></content>
      <categories>
        <category>Cisco</category>
      </categories>
      <tags>
        <tag>Cisco基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快速生成树配置]]></title>
    <url>%2F2019%2F03%2F22%2F%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E6%A0%91%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[拓扑图 配置命令Switch1配置命令enable //进入特权模式 show spanning-tree //查看生成树配置 configure terminal //全局配置模式 hostname S1 //交换机更名 int fa 0/10 switchport access vlan 10 //把端口划分给Vlan 10 exit int rang fa 0/1-2 switchport mode trunk //配置端口为trunk模式 exit spanning-tree mode rapid-pvst //把交换机的生成树模式由默认的STP改成RSTP(快速生成树) end 知识点：trunk端口可封装Vlan标签，用于多Vlan交换机 Switch2配置命令enable configure terminal hostname S2 interface fa0/10 switchport access vlan 10 exit interface range fa0/1-2 switchport mode trunk exit spanning-tree mode rapid-pvst //把交换机的生成树模式由默认的STP改成RSTP(快速生成树) end show spanning-tree 知识点：PVST(per Vlan Spanning Tree)：生成树协议； RSTP(Rapid Spanning Tree Protocol):快速生成树协议;在STP的基础上实现了快速收敛，并增加了边缘端口的概念及保护； 实验结果 当主链路处于down状态的时候，交换机能够自动切换到备份链路，保证数据的正常转发； eg: 使用PC1 ping PC2ipconfig ping -t 192.168.1.3 //-t表示在手动停止前，一直发送数据包 关闭S2正常运行端口，测试快速生成树协议en conf t interface fa 0/1 shutdown //关闭正常运行的端口测试是否自动切换到备份链路 使用ping -t ip 不断的请求PC2，然后关闭正在通信的Fa0/1接口，最后查看PC1中通信情况是否正常（即交换机是否自动切换到备份链路）；]]></content>
      <categories>
        <category>Cisco</category>
      </categories>
      <tags>
        <tag>Cisco基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用三层交换机实现Vlan间路由]]></title>
    <url>%2F2019%2F03%2F21%2F%E5%88%A9%E7%94%A8%E4%B8%89%E5%B1%82%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%AE%9E%E7%8E%B0Vlan%E9%97%B4%E8%B7%AF%E7%94%B1%2F</url>
    <content type="text"><![CDATA[拓扑图 配置命令配置二层交换机enable //特权模式 configure terminal //全局配置模式 vlan 2 //开启vlan exit vlan 3 exit interface fa0/2 switchport access vlan 2 //配置端口在access模式，允许vlan2通过 exit interface fa0/3 switchport access vlan 3 exit interface fa0/1 switchport mode trunk //配置该端口为trunk模式 exit show vlan //查看vlan配置 配置三层交换机enable configure terminal vlan 2 exit vlan 3 exit interface fa0/1 switchport trunk encapsulation dot1q //给端口封装802.1q协议(dot1q),既trunk链路的中继协议 switchport mode trunk //配置该端口为trunk模式 exit interface fa0/2 switchport access vlan 2 exit interface vlan 2 //配置vlan 2 ip address 192.168.1.1 255.255.255.0 //配置IP及其子网掩码 no shutdown //开启vlan 2 exit interface vlan 3 ip address 192.168.2.1 255.255.255.0 no shutdown exit exit ip routing //启用三层交换机IP路由功能 show ip route //查看路由表 实验结果PC3分别ping测试PC1、PC2，实验结果为： PC3ping通PC1；PC3ping通PC2,实现了路由功能； eg:]]></content>
      <categories>
        <category>Cisco</category>
      </categories>
      <tags>
        <tag>Cisco基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cisco多交换机之间的端口聚合链路]]></title>
    <url>%2F2019%2F03%2F20%2Fcisco%E5%A4%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E4%B9%8B%E9%97%B4%E7%9A%84%E7%AB%AF%E5%8F%A3%E8%81%9A%E5%90%88%E9%93%BE%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[拓扑图： 相关知识：port-channel具备了逻辑端口的属性，真正成为一个独立的逻辑端口；端口汇聚是一种逻辑上的抽象过程，将一组具备相同属性的端口，抽象成一个逻辑端口；其不仅能增加网络的带宽，还能提供链路的备份功能，以及负载均衡； 配置命令Switch0的配置命令hostname SwitchA //更名 int port-channel 1 //端口聚合模式 exit int fa0/1 channel-group 1 mode on //将物理端口加入channel-group exit int fa0/2 channel-group 1 mode on exit int fa0/3 channel-group 1 mode on exit int port-channel 1 switchport mode trunk //将端口聚合配置为trunk模式 switchport trunk allowed vlan all Switch1的配置命令hostname SwitchA int port-channel 1 exit interface fa0/1 channel-group 1 mode on exit interface fa0/2 channel-group 1 mode on exit interface fa0/3 channel-group 1 mode on exit int port-channel 1 switchport mode trunk switchport trunk allowed vlan all 结果使用show run查看结果： 知识点 链路聚合的配置，实现交换机间的端口聚合，扩展网络宽带，实现链路冗余备份；]]></content>
      <categories>
        <category>Cisco</category>
      </categories>
      <tags>
        <tag>Cisco基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cisco多交换机上配置基于端口的Vlan隔离办公网络]]></title>
    <url>%2F2019%2F03%2F19%2Fcisco%E5%A4%9A%E4%BA%A4%E6%8D%A2%E6%9C%BA%E4%B8%8A%E9%85%8D%E7%BD%AE%E5%9F%BA%E4%BA%8E%E7%AB%AF%E5%8F%A3%E7%9A%84Vlan%E9%9A%94%E7%A6%BB%E5%8A%9E%E5%85%AC%E7%BD%91%E7%BB%9C%2F</url>
    <content type="text"><![CDATA[拓扑图 配置命令配置左边的交换机enable //特权模式 configure terminal //全局模式 interface fa 0/1 switchport mode trunk //配置Trunk switchport trunk allowed vlan all //trunk允许所有Vlan流量通行（默认trunk就是允许所有） vlan 10 //开启vlan name RD1 //命名 vlan 20 name RD2 interface range fa0/9-fa0/16 //配置一组接口 switchport access vlan 10 //把该端口划分给Vlan exit interface range f0/17-fa0/24 switchport access vlan 20 exit 配置右边的交换机enable configure terminal interface fa0/1 switchport mode trunk switchport trunk allowed vlan all vlan 10 name RD1 vlan 20 name RD2 interface range fa0/9-fa0/16 switchport access vlan 10 exit interface range fa0/17-fa0/24 switchport access vlan 20 exit 注意： access为链接电脑的端口或者傻瓜交换机（也就是同一Vlan的交换机）；trunk则肯定是连接交换机的（属于多vlan的交换机）; 测试结果结果：PC1与PC3、PC2与PC4之间能相互ping通，除此以外的任意两台电脑上ping不通的；]]></content>
      <categories>
        <category>Cisco</category>
      </categories>
      <tags>
        <tag>Cisco基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown基础教学]]></title>
    <url>%2F2019%2F03%2F18%2FMarkDown%E5%9F%BA%E7%A1%80%E6%95%99%E5%AD%A6%2F</url>
    <content type="text"><![CDATA[基础语法标题# h1 ## h2 ### h3 #### h4 ##### h5 ###### h6 段落及区块引用> 这段文字被高亮显示... eg: 这段文字被高亮显示… 插入链接或图片[点击跳转百度](http://www.baidu.com) eg:点击跳转百度 ![图片](https://i.loli.net/2019/03/19/5c903bc01be37.gif) eg: 列表Markdown支持有序列表和无序列表两种形式： 无序列表使用 * 或 + 或 - 标识 * 黄瓜 * 玉米 * 茄子 + 黄瓜 + 玉米 + 茄子 - 黄瓜 - 玉米 - 茄子 有序列表使用数字加.标识，eg: 1. 1. 玉米 2. 黄瓜 3. 茄子 注意：如果在单一列表项中包含了多个段落，为了保证渲染正常，*与段落首字母之间必须保留四个空格。（如果在列表中加入了区块引用，也要缩进4个空格） 分割线*** --- eg: 强调使用 * 或 _ 包裹字符即可。使用单一符号时效果是斜体，使用两个符号标记的效果是加粗； *这里是斜体* _这里是斜体_ eg: 这里是斜体 **这里是加粗** __这里是加粗__ eg: 这里是加粗 高级应用插入代码块使用反引号进行包裹即可； 如果插入一整段代买，需要至少两个以上反引号进行包裹； ` ` `JavaScript //此处声明语言，以便生成高亮效果 function YaoRemu(){ document.write("Hello MarkDown!"); } ` ` ` eg: 123function YaoRemu(){ document.write("Hello MarkDown!");} 插入表格表头|条目一|条目二 :---:|:---:|:---: 项目|项目一|项目二 eg: 表头 条目一 条目二 项目 项目一 项目二 注意：三个杆左右的冒号用于控制对齐方式，只放置左边冒号表示文字居左，只放置右边冒号表示文字具有，两边都放置表示文字居中。 其他特殊符号处理：在使用特殊符号时，需要插入反斜杠； eg: \\ 输出: \ 给文字上色手动添加标签’’’’保存即可； eg: 我是蓝色]]></content>
      <categories>
        <category>教学</category>
      </categories>
      <tags>
        <tag>MarkDown基本语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[No3. Telnet]]></title>
    <url>%2F2019%2F03%2F18%2FciscoTelnet%2F</url>
    <content type="text"><![CDATA[拓扑图: 配置命令: 首先开启Vlan: enable configure terminal interface vlan 1 no shutdown eg: 配置交换机：设置Vlan1 IP及其子网掩码: interface vlan 1 ip address 10.1.1.154 255.255.255.0 exit 设置进入系统视图的密码：enable password **** 设置五条虚拟链接：line vty 0 4 设置特权等级[级别越高权限越大]：privilege level 1 0 设置远程链接(Telnet)的密码：password cisco 设置login验证[如果只设置login,直接输入密码即可；如果设置了login local，则需要输入用户名以及密码]:login 退出VTY[VTY(Virtual typle terminal)虚拟类型终端]的配置：exit 使用PC与交换机进行Telnet测试:Telnet 10.1.1.154 (输入前面密码即可) eg: 结果:]]></content>
      <categories>
        <category>Cisco</category>
      </categories>
      <tags>
        <tag>Cisco基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySql服务安装]]></title>
    <url>%2F2019%2F03%2F17%2FMySql%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[安装过程 先添加安装文件中bin文件夹到用户环境变量(这样才可以使用命令) mysqld –initialize（执行初始化【不添加用户名】/此处注意，如果安装提示出错，可以删除 [data] 文件夹后重试 ） mysqld install (安装MySql) （由于之前已经安装过，所以这里提示 已存在） net start mysql(启动MySql服务) 完成！ 注意：要正确配置[my.ini]中的文件！！！]]></content>
      <categories>
        <category>教学</category>
      </categories>
      <tags>
        <tag>安装教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于我的博客]]></title>
    <url>%2F2019%2F03%2F16%2F%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[~~ 欢迎各位道友!~~]]></content>
  </entry>
</search>
